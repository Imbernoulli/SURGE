[
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 19,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Maximum Subarray"
            ]
        },
        "question": "class Solution:\n    def maximumSum(self, arr):\n        if len(arr) == 1:\n            return arr[0]\n\n        max0 = arr[0]\n        max1 = arr[0]\n        res = arr[0]\n\n        for i in range(1, len(arr)):\n            max1 = max(max1 + arr[i], max0)\n            max0 = max(max0 + arr[i], arr[i])\n            res = max(res, max0, max1)\n\n        return res\n\n# Test case\nsolution = Solution()\nprint(solution.maximumSum([1, -2, 0, 3])) # Output: 4",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 42,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Binary Tree",
                "Backtracking",
                "Path Sum"
            ]
        },
        "question": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> list[list[int]]:\n        if not root:\n            return []\n\n        result = []\n\n        def trace_node(pre_list, left_sum, node):\n            new_list = pre_list.copy()\n            new_list.append(node.val)\n            if not node.left and not node.right:\n                if left_sum == node.val:\n                    result.append(new_list)\n            else:\n                if node.left:\n                    trace_node(new_list, left_sum-node.val, node.left)\n                if node.right:\n                    trace_node(new_list, left_sum-node.val, node.right)\n\n        trace_node([], sum, root)\n        return result\n\n# Test case setup\nroot = TreeNode(5)\nroot.left = TreeNode(4)\nroot.right = TreeNode(8)\nroot.left.left = TreeNode(11)\nroot.right.left = TreeNode(13)\nroot.right.right = TreeNode(4)\nroot.left.left.left = TreeNode(7)\nroot.left.left.right = TreeNode(2)\nroot.right.right.left = TreeNode(5)\nroot.right.right.right = TreeNode(1)\n\nsolution = Solution()\nprint(solution.pathSum(root, 22))",
        "gt": "[[5, 4, 11, 2], [5, 8, 4, 5]]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 14,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Two Sum",
                "Hash Map",
                "Array"
            ]
        },
        "question": "class Solution:\n    def twoSum(self, nums, target):\n        hashtable = dict()\n        for i, num in enumerate(nums):\n            if target - num in hashtable:\n                return [hashtable[target - num], i]\n            hashtable[nums[i]] = i\n        return []\n\n# Test case\nsolution = Solution()\nnums = [2, 7, 11, 15]\ntarget = 9\nprint(solution.twoSum(nums, target))",
        "gt": "[0, 1]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 33,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Sliding Window",
                "Deque",
                "Subarray"
            ]
        },
        "question": "from collections import deque\n\nclass Solution:\n    def longestSubarray(self, nums, limit):\n        maxDeque = deque()\n        minDeque = deque()\n        left = 0\n        result = 0\n\n        for right in range(len(nums)):\n            while maxDeque and nums[right] > maxDeque[-1]:\n                maxDeque.pop()\n            maxDeque.append(nums[right])\n\n            while minDeque and nums[right] < minDeque[-1]:\n                minDeque.pop()\n            minDeque.append(nums[right])\n\n            while maxDeque[0] - minDeque[0] > limit:\n                if nums[left] == maxDeque[0]:\n                    maxDeque.popleft()\n                if nums[left] == minDeque[0]:\n                    minDeque.popleft()\n                left += 1\n\n            result = max(result, right - left + 1)\n\n        return result\n\nsolution = Solution()\nprint(solution.longestSubarray([8,2,4,7], 4)) # Output: 2\nprint(solution.longestSubarray([10,1,2,4,7,2], 5)) # Output: 4\nprint(solution.longestSubarray([4,2,2,2,4,4,2,2], 0)) # Output: 3",
        "gt": "2\n4\n3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 39,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "bit-manipulation",
                "substring",
                "vowels"
            ]
        },
        "question": "#include <iostream>\n#include <unordered_map>\n#include <string>\nusing namespace std;\n\nint findTheLongestSubstring(string s) {\n    unordered_map<char, int> mapper = {{'a', 1}, {'e', 2}, {'i', 4}, {'o', 8}, {'u', 16}};\n    unordered_map<int, int> seen;\n    seen[0] = -1;\n    int max_len = 0, cur = 0;\n\n    for(int i = 0; i < s.size(); ++i){\n        if(mapper.find(s[i]) != mapper.end()){\n            cur ^= mapper[s[i]];\n        }\n        if(seen.find(cur) != seen.end()){\n            max_len = max(max_len, i - seen[cur]);\n        } else {\n            seen[cur] = i;\n        }\n    }\n\n    return max_len;\n}\n\n// Test case\nclass Solution {\npublic:\n    void solve() {\n        string input = \"eleetminicoworoep\";\n        cout << findTheLongestSubstring(input) << endl; // Expected output: 13\n    }\n};\n\nint main(){\n    Solution sol;\n    sol.solve();\n    return 0;\n}",
        "gt": "13",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 26,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "sliding window",
                "array optimization",
                "subarray sum"
            ]
        },
        "question": "function maxScore(cardPoints, k) {\n    const n = cardPoints.length;\n    let totalSum = 0;\n    for (let i = 0; i < n; i++) {\n        totalSum += cardPoints[i];\n    }\n\n    if (k === n) return totalSum;\n\n    let windowSize = n - k;\n    let windowSum = 0;\n    for (let i = 0; i < windowSize; i++) {\n        windowSum += cardPoints[i];\n    }\n\n    let minWindowSum = windowSum;\n    for (let i = windowSize; i < n; i++) {\n        windowSum += cardPoints[i] - cardPoints[i - windowSize];\n        minWindowSum = Math.min(minWindowSum, windowSum);\n    }\n\n    return totalSum - minWindowSum;\n}\n\n// Test case\nconsole.log(maxScore([1,2,3,4,5,6,1], 3));",
        "gt": "12",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 19,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Dynamic Programming",
                "Subsequence",
                "Difference"
            ]
        },
        "question": "function longestSubsequence(arr, difference) {\n    const dp = new Map();\n    let res = 1;\n\n    for (const num of arr) {\n        dp.set(num, 1);\n        if (dp.has(num - difference)) {\n            dp.set(num, dp.get(num - difference) + 1);\n        }\n        res = Math.max(res, dp.get(num));\n    }\n\n    return res;\n}\n\n// Test case\nconst arr = [1, 5, 7, 8, 5, 3, 4, 2, 1];\nconst difference = -2;\nconsole.log(longestSubsequence(arr, difference));",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 17,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "substring",
                "frequency",
                "sliding window"
            ]
        },
        "question": "class Solution {\n    maxFreq(s, maxLetters, minSize, maxSize) {\n        const counter = new Map();\n        let res = 0;\n        for (let i = 0; i <= s.length - minSize; i++) {\n            const sub = s.substring(i, i + minSize);\n            if (new Set(sub).size <= maxLetters) {\n                counter.set(sub, (counter.get(sub) || 0) + 1);\n                res = Math.max(res, counter.get(sub));\n            }\n        }\n        return res;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.maxFreq(\"aababcaab\", 2, 3, 4));",
        "gt": "2",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 30,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Binary Search",
                "Greedy",
                "Shipping"
            ]
        },
        "question": "from typing import List\n\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        lo = 0\n        hi = sum(weights)\n\n        def canShip(opacity):\n            days = 1\n            remain = opacity\n            for weight in weights:\n                if weight > opacity:\n                    return False\n                remain -= weight\n                if remain < 0:\n                    days += 1\n                    remain = opacity - weight\n            return days <= D\n\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if canShip(mid):\n                hi = mid\n            else:\n                lo = mid + 1\n\n        return lo\n\nsolution = Solution()\nprint(solution.shipWithinDays([1,2,3,4,5,6,7,8,9,10], 5))",
        "gt": "15",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 31,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Binary Tree",
                "Zigzag Traversal",
                "Math"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nvector<int> pathInZigZagTree(int label) {\n    int level = 0;\n    vector<int> res;\n\n    while ((1 << level) - 1 < label) {\n        level++;\n    }\n\n    while (level > 0) {\n        res.insert(res.begin(), label);\n        label = (1 << (level - 1)) + (1 << level) - 1 - label;\n        label /= 2;\n        level--;\n    }\n\n    return res;\n}\n\n// Test case\nint main() {\n    vector<int> result = pathInZigZagTree(14);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << (i < result.size() - 1 ? \",\" : \"\");\n    }\n    return 0;\n}",
        "gt": "1,3,4,14",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 9,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "bit manipulation",
                "xor operation",
                "unique element"
            ]
        },
        "question": "class Solution:\n    def singleNumber(self, nums):\n        single_number = 0\n        for num in nums:\n            single_number ^= num\n        return single_number\n\nsolution = Solution()\nprint(solution.singleNumber([4,1,2,1,2]))",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 38,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Linked List",
                "Binary Search Tree",
                "Divide and Conquer"
            ]
        },
        "question": "class TreeNode {\n  constructor(val, left = null, right = null) {\n    this.val = val;\n    this.left = left;\n    this.right = right;\n  }\n}\n\nclass ListNode {\n  constructor(val, next = null) {\n    this.val = val;\n    this.next = next;\n  }\n}\n\nfunction sortedListToBST(head) {\n  if (!head) return null;\n  return run(head, null);\n}\n\nfunction run(head, tail) {\n  if (head == tail) return null;\n  let fast = head;\n  let slow = head;\n  while (fast != tail && fast.next != tail) {\n    fast = fast.next.next;\n    slow = slow.next;\n  }\n  let root = new TreeNode(slow.val);\n  root.left = run(head, slow);\n  root.right = run(slow.next, tail);\n  return root;\n}\n\n// Test case\nlet head = new ListNode(-10, new ListNode(-3, new ListNode(0, new ListNode(5, new ListNode(9)))));\nlet result = sortedListToBST(head);\nconsole.log(JSON.stringify(result));",
        "gt": "{\"val\":0,\"left\":{\"val\":-3,\"left\":{\"val\":-10,\"left\":null,\"right\":null},\"right\":null},\"right\":{\"val\":9,\"left\":{\"val\":5,\"left\":null,\"right\":null},\"right\":null}}",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 19,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Palindrome",
                "String",
                "Two Pointers"
            ]
        },
        "question": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s) - 1\n        while left < right:\n            if not s[left].isalnum():\n                left += 1\n                continue\n            if not s[right].isalnum():\n                right -= 1\n                continue\n            if s[left].lower() == s[right].lower():\n                left += 1\n                right -= 1\n            else:\n                break\n        return right <= left\n\nsolution = Solution()\nprint(solution.isPalindrome(\"A man, a plan, a canal: Panama\"))",
        "gt": "True",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 21,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Dynamic Programming",
                "Subsequence",
                "Difference"
            ]
        },
        "question": "from typing import List\n\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        res = 1\n        dp = {}\n\n        for num in arr:\n            dp[num] = 1\n            if num - difference in dp:\n                dp[num] = dp[num - difference] + 1\n            res = max(res, dp[num])\n\n        return res\n\n# Test case\narr = [1, 5, 7, 8, 5, 3, 4, 2, 1]\ndifference = -2\nsolution = Solution()\nprint(solution.longestSubsequence(arr, difference))",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 32,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Binary Tree",
                "BFS",
                "Depth"
            ]
        },
        "question": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef maxDepth(root):\n    if not root:\n        return 0\n    q = [root, None]\n    depth = 1\n\n    while q:\n        node = q.pop(0)\n        if node:\n            if node.left:\n                q.append(node.left)\n            if node.right:\n                q.append(node.right)\n        elif q:\n            q.append(None)\n            depth += 1\n\n    return depth\n\n# Test case\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\nprint(maxDepth(root))",
        "gt": "3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 14,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Two Sum",
                "Hash Table",
                "Array"
            ]
        },
        "question": "class Solution:\n    def twoSum(self, nums, target):\n        hashtable = dict()\n        for i, num in enumerate(nums):\n            if target - num in hashtable:\n                return [hashtable[target - num], i]\n            hashtable[nums[i]] = i\n        return []\n\n# Test case\nsolution = Solution()\nnums = [2, 7, 11, 15]\ntarget = 9\nprint(solution.twoSum(nums, target))",
        "gt": "[0, 1]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 19,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Number Theory",
                "Modular Arithmetic",
                "Divisibility"
            ]
        },
        "question": "class Solution {\n    smallestRepunitDivByK(K) {\n        if ([2, 4, 5, 6, 8].includes(K % 10)) return -1;\n        const seen = new Set();\n        let mod = 0;\n        for (let i = 1; i <= K; i++) {\n            mod = (mod * 10 + 1) % K;\n            if (seen.has(mod)) return -1;\n            if (mod === 0) return i;\n            seen.add(mod);\n        }\n        return -1;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.smallestRepunitDivByK(1)); // 1\nconsole.log(solution.smallestRepunitDivByK(2)); // -1\nconsole.log(solution.smallestRepunitDivByK(3)); // 3",
        "gt": "1\n-1\n3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 30,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Palindrome Partitioning"
            ]
        },
        "question": "class Solution {\n    minCut(s) {\n        const n = s.length;\n        const palindromePairs = Array.from({ length: n }, () => Array(n).fill(true));\n\n        for (let i = n - 1; i >= 0; i--) {\n            for (let j = i + 1; j < n; j++) {\n                palindromePairs[i][j] = (s[i] === s[j]) && palindromePairs[i + 1][j - 1];\n            }\n        }\n\n        const dp = new Array(n).fill(Infinity);\n        dp[0] = 0;\n\n        for (let i = 0; i < n; i++) {\n            for (let j = i + 1; j < n; j++) {\n                if (palindromePairs[0][j]) {\n                    dp[j] = 0;\n                } else if (palindromePairs[i + 1][j]) {\n                    dp[j] = Math.min(dp[j], dp[i] + 1);\n                }\n            }\n        }\n\n        return dp[n - 1];\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.minCut(\"aab\"));",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 39,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "Binary Tree",
                "Level Order",
                "BFS"
            ]
        },
        "question": "class TreeNode {\n  constructor(val, left = null, right = null) {\n    this.val = val;\n    this.left = left;\n    this.right = right;\n  }\n}\n\nfunction levelOrder(root) {\n  if (!root) return [];\n  const items = [];\n  const queue = [root, null];\n  let levelNodes = [];\n\n  while (queue.length > 0) {\n    const t = queue.shift();\n\n    if (t) {\n      levelNodes.push(t.val);\n      if (t.left) {\n        queue.push(t.left);\n      }\n      if (t.right) {\n        queue.push(t.right);\n      }\n    } else {\n      items.push(levelNodes);\n      levelNodes = [];\n      if (queue.length > 0) {\n        queue.push(null);\n      }\n    }\n  }\n\n  return items;\n}\n\nconst root = new TreeNode(3, new TreeNode(9), new TreeNode(20, new TreeNode(15), new TreeNode(7)));\nconsole.log(JSON.stringify(levelOrder(root)));",
        "gt": "[[3],[9,20],[15,7]]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 53,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Search Tree",
                "Recursion",
                "Divide and Conquer"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        return reBuild(nums, 0, nums.size() - 1);\n    }\n\nprivate:\n    TreeNode* reBuild(vector<int>& nums, int left, int right) {\n        if (left > right) {\n            return NULL;\n        }\n        int mid = (left + right) / 2;\n        TreeNode* root = new TreeNode(nums[mid]);\n        root->left = reBuild(nums, left, mid - 1);\n        root->right = reBuild(nums, mid + 1, right);\n        return root;\n    }\n};\n\n// Test case\nvoid serializeTree(TreeNode* root, vector<string>& result) {\n    if (!root) {\n        result.push_back(\"null\");\n        return;\n    }\n    result.push_back(to_string(root->val));\n    serializeTree(root->left, result);\n    serializeTree(root->right, result);\n}\n\nint main() {\n    Solution solution;\n    vector<int> nums = {-10, -3, 0, 5, 9};\n    TreeNode* root = solution.sortedArrayToBST(nums);\n    vector<string> result;\n    serializeTree(root, result);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i];\n        if (i != result.size() - 1) cout << \",\";\n    }\n    return 0;\n}",
        "gt": "0,-10,null,-3,null,null,5,null,9,null,null",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 9,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "bit manipulation",
                "xor operation"
            ]
        },
        "question": "var singleNumber = function (nums) {\n  let ret = 0;\n  for (let index = 0; index < nums.length; index++) {\n    const element = nums[index];\n    ret = ret ^ element;\n  }\n  return ret;\n};\nconsole.log(singleNumber([2, 2, 1]));",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 26,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Optimization",
                "Knapsack"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring largestNumber(vector<int>& cost, int target) {\n    vector<long long> dp(target + 1, -1e18);\n    dp[0] = 0;\n\n    for (int i = 9; i >= 1; --i) {\n        for (int j = cost[i - 1]; j <= target; ++j) {\n            dp[j] = max(dp[j], dp[j - cost[i - 1]] * 10 + i);\n        }\n    }\n\n    return dp[target] > 0 ? to_string(dp[target]) : \"0\";\n}\n\n// Test case\nint main() {\n    vector<int> cost = {4,3,2,5,6,7,2,5,5};\n    int target = 9;\n    cout << largestNumber(cost, target) << endl;\n    return 0;\n}",
        "gt": "8446744073709551625",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 36,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "BFS",
                "Graph",
                "Shortest Path"
            ]
        },
        "question": "from collections import defaultdict, deque\n\nclass Solution:\n    def minJumps(self, arr: list[int]) -> int:\n        n = len(arr)\n        if n == 1:\n            return 0\n\n        graph = defaultdict(list)\n        for i in range(n):\n            graph[arr[i]].append(i)\n\n        visited = set()\n        visited.add(0)\n        queue = deque([(0, 0)])\n\n        while queue:\n            node, steps = queue.popleft()\n\n            if node == n - 1:\n                return steps\n\n            neighbors = graph[arr[node]] + [node - 1, node + 1]\n\n            for neighbor in neighbors:\n                if 0 <= neighbor < n and neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, steps + 1))\n\n            graph[arr[node]].clear()\n\n        return -1\n\n# Test case\nsolution = Solution()\nprint(solution.minJumps([100,-23,-23,404,100,23,23,23,3,404]))",
        "gt": "3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 14,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Palindrome",
                "String",
                "Subsequence"
            ]
        },
        "question": "class Solution {\n    removePalindromeSub(s) {\n        if (s === '') {\n            return 0;\n        }\n        return s === s.split('').reverse().join('') ? 1 : 2;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.removePalindromeSub(\"ababa\")); // Output: 1\nconsole.log(solution.removePalindromeSub(\"abb\"));   // Output: 2\nconsole.log(solution.removePalindromeSub(\"baabb\")); // Output: 2\nconsole.log(solution.removePalindromeSub(\"\"));      // Output: 0",
        "gt": "1\n2\n2\n0",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 23,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Tree",
                "Preorder Traversal",
                "Stack"
            ]
        },
        "question": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef preorderTraversal(root):\n    if not root:\n        return []\n    ret = []\n    stack = [root]\n    while stack:\n        node = stack.pop()\n        ret.append(node.val)\n        if node.right:\n            stack.append(node.right)\n        if node.left:\n            stack.append(node.left)\n    return ret\n\n# Test case\nroot = TreeNode(1, None, TreeNode(2, TreeNode(3)))\nprint(preorderTraversal(root))",
        "gt": "[1, 2, 3]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 35,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Palindrome",
                "String",
                "Two Pointers"
            ]
        },
        "question": "function isValid(c) {\n    const charCode = c.charCodeAt(0);\n    const isDigit = charCode >= \"0\".charCodeAt(0) && charCode <= \"9\".charCodeAt(0);\n    const isChar = charCode >= \"a\".charCodeAt(0) && charCode <= \"z\".charCodeAt(0);\n\n    return isDigit || isChar;\n}\n\nvar isPalindrome = function (s) {\n    s = s.toLowerCase();\n    let left = 0;\n    let right = s.length - 1;\n\n    while (left < right) {\n        if (!isValid(s[left])) {\n            left++;\n            continue;\n        }\n        if (!isValid(s[right])) {\n            right--;\n            continue;\n        }\n\n        if (s[left] === s[right]) {\n            left++;\n            right--;\n        } else {\n            break;\n        }\n    }\n\n    return right <= left;\n};\n\nconsole.log(isPalindrome(\"A man, a plan, a canal: Panama\"));",
        "gt": "true",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 32,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Dynamic Programming",
                "Subsequence",
                "Difference"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int longestSubsequence(vector<int>& arr, int difference) {\n        unordered_map<int, int> dp;\n        int res = 1;\n\n        for (int num : arr) {\n            dp[num] = 1;\n            if (dp.find(num - difference) != dp.end()) {\n                dp[num] = dp[num - difference] + 1;\n            }\n            res = max(res, dp[num]);\n        }\n\n        return res;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> arr = {1, 5, 7, 8, 5, 3, 4, 2, 1};\n    int difference = -2;\n    cout << solution.longestSubsequence(arr, difference) << endl;\n    return 0;\n}",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 45,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "alphabet board",
                "pathfinding",
                "string manipulation"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    string alphabetBoardPath(string target) {\n        vector<pair<int, int>> board;\n        for (int i = 0; i < 5; ++i) {\n            for (int j = 0; j < 5; ++j) {\n                board.emplace_back(i, j);\n            }\n        }\n        board.emplace_back(5, 0);\n\n        int last_x = 0, last_y = 0;\n        string ans;\n\n        for (char c : target) {\n            int idx = c - 'a';\n            int nxt_x = board[idx].first;\n            int nxt_y = board[idx].second;\n\n            int up = max(0, last_x - nxt_x);\n            int down = max(0, nxt_x - last_x);\n            int left = max(0, last_y - nxt_y);\n            int right = max(0, nxt_y - last_y);\n\n            ans += string(up, 'U') + string(left, 'L') + string(down, 'D') + string(right, 'R') + \"!\";\n\n            last_x = nxt_x;\n            last_y = nxt_y;\n        }\n\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    cout << solution.alphabetBoardPath(\"leet\") << endl; // DDR!UURRR!!DDD!\n    cout << solution.alphabetBoardPath(\"code\") << endl; // RR!DDRR!UUL!R!\n    return 0;\n}",
        "gt": "DDR!UURRR!!DDD!\nRR!DDRR!UUL!R!",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 34,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Binary Tree",
                "Recursion",
                "Path Sum"
            ]
        },
        "question": "class TreeNode {\n  constructor(val, left = null, right = null) {\n    this.val = val;\n    this.left = left;\n    this.right = right;\n  }\n}\n\nfunction helper(node, payload) {\n  if (node === null) return 0;\n\n  const l = helper(node.left, payload);\n  const r = helper(node.right, payload);\n\n  payload.max = Math.max(\n    node.val + Math.max(0, l) + Math.max(0, r),\n    payload.max\n  );\n\n  return node.val + Math.max(l, r, 0);\n}\n\nfunction maxPathSum(root) {\n  if (root === null) return 0;\n  const payload = {\n    max: root.val,\n  };\n  helper(root, payload);\n  return payload.max;\n}\n\n// Test case\nconst root = new TreeNode(-10, new TreeNode(9), new TreeNode(20, new TreeNode(15), new TreeNode(7)));\nconsole.log(maxPathSum(root));",
        "gt": "42",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 29,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Permutation",
                "Array Manipulation",
                "Optimization"
            ]
        },
        "question": "class Solution {\n    prevPermOpt1(arr) {\n        let l = -1;\n        for (let i = arr.length - 1; i > 0; i--) {\n            if (arr[i - 1] > arr[i]) {\n                l = i - 1;\n                break;\n            }\n        }\n        if (l === -1) return arr;\n\n        let r = -1;\n        for (let i = arr.length - 1; i > l; i--) {\n            if (arr[i] < arr[l] && arr[i] !== arr[i - 1]) {\n                r = i;\n                break;\n            }\n        }\n        if (r === -1) return arr;\n\n        [arr[l], arr[r]] = [arr[r], arr[l]];\n        return arr;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.prevPermOpt1([3,2,1])); // [3,1,2]\nconsole.log(solution.prevPermOpt1([1,1,5])); // [1,1,5]\nconsole.log(solution.prevPermOpt1([1,9,4,6,7])); // [1,7,4,6,9]",
        "gt": "[ 3, 1, 2 ]\n[ 1, 1, 5 ]\n[ 1, 7, 4, 6, 9 ]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 15,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "domino pairs",
                "equivalence",
                "bit manipulation"
            ]
        },
        "question": "class Solution:\n    def numEquivDominoPairs(self, dominoes: list[list[int]]) -> int:\n        counts = [0] * 1024\n        ans = 0\n        for a, b in dominoes:\n            if a >= b:\n                v = (a << 5) | b\n            else:\n                v = (b << 5) | a\n            ans += counts[v]\n            counts[v] += 1\n        return ans\n\nsolution = Solution()\nprint(solution.numEquivDominoPairs([[1,2],[2,1],[3,4],[5,6]]))",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 20,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Binary Tree",
                "Zigzag Traversal",
                "Math"
            ]
        },
        "question": "function pathInZigZagTree(label) {\n    let level = 0;\n    const res = [];\n\n    while ((2 ** level) - 1 < label) {\n        level++;\n    }\n\n    while (level > 0) {\n        res.unshift(label);\n        label = (2 ** (level - 1)) + (2 ** level - 1) - label;\n        label = Math.floor(label / 2);\n        level--;\n    }\n\n    return res;\n}\n\n// Test case\nconsole.log(pathInZigZagTree(14).join(','));",
        "gt": "1,3,4,14",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 30,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "Binary Tree",
                "Symmetry",
                "Recursion"
            ]
        },
        "question": "class TreeNode {\n    constructor(val) {\n        this.val = val;\n        this.left = this.right = null;\n    }\n}\n\nclass Solution {\n    isSymmetric(root) {\n        if (root === null) return true;\n        return this.recur(root.left, root.right);\n    }\n\n    recur(l, r) {\n        if (l === null && r === null) return true;\n        if (l === null || r === null || l.val !== r.val) return false;\n        return this.recur(l.left, r.right) && this.recur(l.right, r.left);\n    }\n}\n\n// Test case\nconst solution = new Solution();\nconst tree = new TreeNode(1);\ntree.left = new TreeNode(2);\ntree.right = new TreeNode(2);\ntree.left.left = new TreeNode(3);\ntree.left.right = new TreeNode(4);\ntree.right.left = new TreeNode(4);\ntree.right.right = new TreeNode(3);\nconsole.log(solution.isSymmetric(tree));",
        "gt": "true",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 38,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "String Matching",
                "CamelCase",
                "Pattern Recognition"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool isMatch(const string& query, const string& pattern) {\n    int i = 0, j = 0;\n    while (i < query.size()) {\n        if (j < pattern.size() && query[i] == pattern[j]) {\n            i++;\n            j++;\n        } else if (query[i] >= 'a' && query[i] <= 'z') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return j == pattern.size();\n}\n\nvector<bool> camelMatch(vector<string>& queries, string pattern) {\n    vector<bool> result;\n    for (const string& query : queries) {\n        result.push_back(isMatch(query, pattern));\n    }\n    return result;\n}\n\n// Test case\nint main() {\n    vector<string> queries = {\"FooBar\", \"FooBarTest\", \"FootBall\", \"FrameBuffer\", \"ForceFeedBack\"};\n    string pattern = \"FB\";\n    vector<bool> res = camelMatch(queries, pattern);\n    for (bool b : res) {\n        cout << (b ? \"true\" : \"false\") << \",\";\n    }\n    return 0;\n}",
        "gt": "true,false,true,true,false,",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 41,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Tree",
                "BFS",
                "Zigzag Traversal"
            ]
        },
        "question": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef zigzagLevelOrder(root):\n    if not root:\n        return []\n\n    items = []\n    is_odd = True\n    level_nodes = []\n\n    queue = deque([root, None])\n\n    while queue:\n        t = queue.popleft()\n\n        if t:\n            level_nodes.append(t.val)\n            if t.left:\n                queue.append(t.left)\n            if t.right:\n                queue.append(t.right)\n        else:\n            if not is_odd:\n                level_nodes = level_nodes[::-1]\n            items.append(level_nodes)\n            level_nodes = []\n            is_odd = not is_odd\n            if queue:\n                queue.append(None)\n\n    return items\n\n# Test case\nroot = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))\nprint(zigzagLevelOrder(root))",
        "gt": "[[3], [20, 9], [15, 7]]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 19,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Number Theory",
                "Modular Arithmetic",
                "Divisibility"
            ]
        },
        "question": "class Solution:\n    def smallestRepunitDivByK(self, K: int) -> int:\n        if K % 10 in [2, 4, 5, 6, 8]:\n            return -1\n        seen = set()\n        mod = 0\n        for i in range(1, K + 1):\n            mod = (mod * 10 + 1) % K\n            if mod in seen:\n                return -1\n            if mod == 0:\n                return i\n            seen.add(mod)\n        return -1\n\nsolution = Solution()\nprint(solution.smallestRepunitDivByK(1)) # 1\nprint(solution.smallestRepunitDivByK(2)) # -1\nprint(solution.smallestRepunitDivByK(3)) # 3",
        "gt": "1\n-1\n3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 61,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Custom Stack",
                "Increment Operation"
            ]
        },
        "question": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nclass CustomStack {\npublic:\n    vector<int> st;\n    int cnt;\n    int size;\n    vector<int> incrementals;\n\n    CustomStack(int maxSize) {\n        cnt = 0;\n        size = maxSize;\n        incrementals.resize(maxSize);\n    }\n\n    void push(int x) {\n        if (cnt < size) {\n            st.push_back(x);\n            incrementals[cnt] = 0;\n            cnt++;\n        }\n    }\n\n    int pop() {\n        if (cnt == 0) return -1;\n        cnt--;\n        if (cnt >= 1) {\n            incrementals[cnt - 1] += incrementals[cnt];\n        }\n        int res = st.back() + incrementals[cnt];\n        st.pop_back();\n        incrementals[cnt] = 0;\n        return res;\n    }\n\n    void increment(int k, int val) {\n        if (cnt > 0) {\n            incrementals[min(cnt, k) - 1] += val;\n        }\n    }\n};\n\n// Test case\nint main() {\n    CustomStack customStack(3);\n    customStack.push(1);\n    customStack.push(2);\n    cout << customStack.pop() << endl; // 2\n    customStack.push(2);\n    customStack.push(3);\n    customStack.push(4);\n    customStack.increment(5, 100);\n    customStack.increment(2, 100);\n    cout << customStack.pop() << endl; // 103\n    cout << customStack.pop() << endl; // 202\n    cout << customStack.pop() << endl; // 201\n    cout << customStack.pop() << endl; // -1\n    return 0;\n}",
        "gt": "2\n103\n202\n201\n-1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 17,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Partitioning",
                "Optimization"
            ]
        },
        "question": "from functools import lru_cache\nclass Solution:\n    def maxSumAfterPartitioning(self, arr, k: int) -> int:\n        @lru_cache(None)\n        def dp(i):\n            if i >= len(arr): return 0\n            ans = 0\n            max_value = -1\n            for steps in range(1, k + 1):\n                if i + steps - 1 < len(arr): max_value = max(max_value, arr[i + steps - 1])\n                else: break\n                ans = max(ans, max_value * steps + dp(i + steps))\n            return ans\n        return dp(0)\n\nsolution = Solution()\nprint(solution.maxSumAfterPartitioning([1,15,7,9,2,5,10], 3))",
        "gt": "84",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 36,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "sliding window",
                "array optimization",
                "subarray sum"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint maxScore(vector<int>& cardPoints, int k) {\n    int n = cardPoints.size();\n    int totalSum = 0;\n    for(int point : cardPoints) {\n        totalSum += point;\n    }\n\n    if(k == n) return totalSum;\n\n    int windowSize = n - k;\n    int windowSum = 0;\n    for(int i = 0; i < windowSize; i++) {\n        windowSum += cardPoints[i];\n    }\n\n    int minWindowSum = windowSum;\n    for(int i = windowSize; i < n; i++) {\n        windowSum += cardPoints[i] - cardPoints[i - windowSize];\n        minWindowSum = min(minWindowSum, windowSum);\n    }\n\n    return totalSum - minWindowSum;\n}\n\n// Test case\nint main() {\n    vector<int> cardPoints = {1, 2, 3, 4, 5, 6, 1};\n    int k = 3;\n    cout << maxScore(cardPoints, k);\n    return 0;\n}",
        "gt": "12",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 16,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Probability",
                "Math"
            ]
        },
        "question": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    double nthPersonGetsNthSeat(int n) {\n        return n == 1 ? 1.0 : 0.5;\n    }\n};\n\nint main() {\n    Solution solution;\n    cout << solution.nthPersonGetsNthSeat(1) << endl; // Output: 1\n    cout << solution.nthPersonGetsNthSeat(2) << endl; // Output: 0.5\n    return 0;\n}",
        "gt": "1\n0.5",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 24,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "String Matching",
                "CamelCase",
                "Pattern Recognition"
            ]
        },
        "question": "class Solution:\n    def camelMatch(self, queries, pattern):\n        def is_match(query, pattern):\n            i, j = 0, 0\n            while i < len(query):\n                if j < len(pattern) and query[i] == pattern[j]:\n                    i += 1\n                    j += 1\n                elif query[i].islower():\n                    i += 1\n                else:\n                    return False\n            return j == len(pattern)\n\n        result = []\n        for query in queries:\n            result.append(is_match(query, pattern))\n        return result\n\n# Test case\nqueries = [\"FooBar\", \"FooBarTest\", \"FootBall\", \"FrameBuffer\", \"ForceFeedBack\"]\npattern = \"FB\"\nsol = Solution()\nprint(sol.camelMatch(queries, pattern))",
        "gt": "[True, False, True, True, False]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 15,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Stock Trading",
                "Profit Maximization",
                "Array Iteration"
            ]
        },
        "question": "var maxProfit = function (prices) {\n    let profit = 0;\n\n    for (let i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            profit = profit + prices[i] - prices[i - 1];\n        }\n    }\n\n    return profit;\n};\n\n// Test case\nconst prices = [7, 1, 5, 3, 6, 4];\nconsole.log(maxProfit(prices));",
        "gt": "7",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 47,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Linked List",
                "Cycle Detection",
                "Two Pointers"
            ]
        },
        "question": "#include <iostream>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        if (!head || !head->next) return NULL;\n\n        ListNode *fast = head, *slow = head;\n\n        do {\n            if (!fast || !fast->next) return NULL;\n            fast = fast->next->next;\n            slow = slow->next;\n        } while (fast != slow);\n\n        fast = head;\n\n        while (fast != slow) {\n            fast = fast->next;\n            slow = slow->next;\n        }\n\n        return fast;\n    }\n};\n\nint main() {\n    ListNode *node1 = new ListNode(3);\n    ListNode *node2 = new ListNode(2);\n    ListNode *node3 = new ListNode(0);\n    ListNode *node4 = new ListNode(-4);\n    node1->next = node2;\n    node2->next = node3;\n    node3->next = node4;\n    node4->next = node2; // Creates a cycle\n\n    Solution solution;\n    cout << (solution.detectCycle(node1) == node2 ? \"true\" : \"false\") << endl;\n    return 0;\n}",
        "gt": "true",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 70,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "LRU Cache",
                "Doubly Linked List",
                "Hash Map"
            ]
        },
        "question": "class DLinkedNode:\n    def __init__(self, key=0, value=0):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.cache = dict()\n        self.head = DLinkedNode()\n        self.tail = DLinkedNode()\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.capacity = capacity\n        self.size = 0\n\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        node = self.cache[key]\n        self.moveToHead(node)\n        return node.value\n\n    def put(self, key: int, value: int) -> None:\n        if key not in self.cache:\n            node = DLinkedNode(key, value)\n            self.cache[key] = node\n            self.addToHead(node)\n            self.size += 1\n\n            if self.size > self.capacity:\n                removed = self.removeTail()\n                self.cache.pop(removed.key)\n                self.size -= 1\n        else:\n            node = self.cache[key]\n            node.value = value\n            self.moveToHead(node)\n\n    def addToHead(self, node):\n        node.prev = self.head\n        node.next = self.head.next\n        self.head.next.prev = node\n        self.head.next = node\n\n    def removeNode(self, node):\n        node.prev.next = node.next\n        node.next.prev = node.prev\n\n    def moveToHead(self, node):\n        self.removeNode(node)\n        self.addToHead(node)\n\n    def removeTail(self):\n        node = self.tail.prev\n        self.removeNode(node)\n        return node\n\n# Test case\nlRUCache = LRUCache(2)\nlRUCache.put(1, 1)\nlRUCache.put(2, 2)\nprint(lRUCache.get(1))\nlRUCache.put(3, 3)\nprint(lRUCache.get(2))\nlRUCache.put(4, 4)\nprint(lRUCache.get(1))\nprint(lRUCache.get(3))\nprint(lRUCache.get(4))",
        "gt": "1\n-1\n-1\n3\n4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 27,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "Stack",
                "RPN",
                "Evaluation"
            ]
        },
        "question": "class Solution:\n    def evalRPN(self, tokens):\n        if len(tokens) > 2:\n            stack = []\n            operations = ['+', '-', '*', '/']\n            for token in tokens:\n                if token in operations:\n                    b = int(stack.pop())\n                    a = int(stack.pop())\n                    if '+' == token:\n                        tmp = a + b\n                    elif '-' == token:\n                        tmp = a - b\n                    elif '*' == token:\n                        tmp = a * b\n                    else:\n                        tmp = int(a / b)\n                    stack.append(tmp)\n                else:\n                    stack.append(token)\n            return int(stack[0])\n        return int(tokens[-1])\n\n# Test case\nsol = Solution()\ntokens = [\"2\", \"1\", \"+\", \"3\", \"*\"]\nprint(sol.evalRPN(tokens))",
        "gt": "9",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 29,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "stock",
                "profit"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.empty()) return 0;\n        auto min = prices[0];\n        auto profit = 0;\n        for (auto i = 1; i < prices.size(); ++i) {\n            if (prices[i] > prices[i - 1]) {\n                profit = max(profit, prices[i] - min);\n            } else {\n                min = std::min(min, prices[i]);\n            }\n        }\n        return profit;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> prices = {7,1,5,3,6,4};\n    cout << solution.maxProfit(prices);\n    return 0;\n}",
        "gt": "5",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 25,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Binary Tree",
                "Recursion",
                "Path Sum"
            ]
        },
        "question": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def __init__(self):\n        self.ans = float('-inf')\n\n    def maxPathSum(self, root: TreeNode) -> int:\n        def helper(node):\n            if not node: return 0\n            l = helper(node.left)\n            r = helper(node.right)\n            self.ans = max(self.ans, max(l, 0) + max(r, 0) + node.val)\n            return max(l, r, 0) + node.val\n\n        helper(root)\n        return self.ans\n\n# Test case\nroot = TreeNode(-10, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))\nsolution = Solution()\nprint(solution.maxPathSum(root))",
        "gt": "42",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 53,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Search",
                "Greedy",
                "Shipping"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <numeric>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int shipWithinDays(vector<int>& weights, int D) {\n        int high = accumulate(weights.begin(), weights.end(), 0);\n        int low = *max_element(weights.begin(), weights.end());\n\n        while (low < high) {\n            int mid = low + (high - low) / 2;\n            if (canShip(weights, mid, D)) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return low;\n    }\n\nprivate:\n    bool canShip(vector<int>& weights, int opacity, int D) {\n        int remain = opacity;\n        int count = 1;\n        for (int weight : weights) {\n            if (weight > opacity) {\n                return false;\n            }\n            remain -= weight;\n            if (remain < 0) {\n                count++;\n                remain = opacity - weight;\n            }\n            if (count > D) {\n                return false;\n            }\n        }\n        return count <= D;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> weights = {1,2,3,4,5,6,7,8,9,10};\n    int D = 5;\n    cout << solution.shipWithinDays(weights, D);\n    return 0;\n}",
        "gt": "15",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 64,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Backtracking",
                "Word Score",
                "Letter Frequency"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxScoreWords(vector<string>& words, vector<char>& letters, vector<int>& score) {\n        int ans = 0;\n        vector<int> wordsScore;\n        vector<unordered_map<char, int>> wordsCounter;\n\n        for (auto& word : words) {\n            int s = 0;\n            unordered_map<char, int> counter;\n            for (auto& c : word) {\n                s += score[c - 'a'];\n                counter[c]++;\n            }\n            wordsScore.push_back(s);\n            wordsCounter.push_back(counter);\n        }\n\n        unordered_map<char, int> letterCount;\n        for (auto& c : letters) letterCount[c]++;\n\n        backtrack(words, wordsScore, wordsCounter, letterCount, 0, 0, ans);\n        return ans;\n    }\n\nprivate:\n    void backtrack(vector<string>& words, vector<int>& wordsScore, vector<unordered_map<char, int>>& wordsCounter,\n                   unordered_map<char, int> counter, int start, int cur, int& ans) {\n        if (start > words.size()) return;\n        ans = max(ans, cur);\n        for (int j = start; j < wordsCounter.size(); ++j) {\n            auto& wCounter = wordsCounter[j];\n            bool valid = true;\n            for (auto &[c, n] : wCounter) {\n                if (counter[c] < n) {\n                    valid = false;\n                    break;\n                }\n            }\n            if (valid) {\n                for (auto &[c, n] : wCounter) counter[c] -= n;\n                backtrack(words, wordsScore, wordsCounter, counter, j + 1, cur + wordsScore[j], ans);\n                for (auto &[c, n] : wCounter) counter[c] += n;\n            }\n        }\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<string> words = {\"dog\", \"cat\", \"dad\", \"good\"};\n    vector<char> letters = {'a', 'a', 'c', 'd', 'd', 'd', 'g', 'o', 'o'};\n    vector<int> score(26, 0);\n    score['a'-'a'] = 1; score['c'-'a'] = 9; score['d'-'a'] = 5; score['g'-'a'] = 3; score['o'-'a'] = 2;\n    cout << solution.maxScoreWords(words, letters, score);\n    return 0;\n}",
        "gt": "23",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 68,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Trie",
                "Stream Processing"
            ]
        },
        "question": "class TrieNode {\n    constructor() {\n        this.children = {};\n        this.isEndOfWord = false;\n    }\n}\n\nclass Trie {\n    constructor() {\n        this.root = new TrieNode();\n    }\n\n    insert(word) {\n        let node = this.root;\n        for (let char of word) {\n            if (!node.children[char]) {\n                node.children[char] = new TrieNode();\n            }\n            node = node.children[char];\n        }\n        node.isEndOfWord = true;\n    }\n\n    search(stream) {\n        let node = this.root;\n        for (let char of stream) {\n            if (!node.children[char]) {\n                return false;\n            }\n            node = node.children[char];\n            if (node.isEndOfWord) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nclass StreamChecker {\n    constructor(words) {\n        this.trie = new Trie();\n        this.stream = [];\n\n        for (let word of [...new Set(words)]) {\n            this.trie.insert(word.split('').reverse().join(''));\n        }\n    }\n\n    query(letter) {\n        this.stream.unshift(letter);\n        return this.trie.search(this.stream);\n    }\n}\n\n// Test case\nconst streamChecker = new StreamChecker([\"cd\", \"f\", \"kl\"]);\nconsole.log(streamChecker.query('a')); // false\nconsole.log(streamChecker.query('b')); // false\nconsole.log(streamChecker.query('c')); // false\nconsole.log(streamChecker.query('d')); // true\nconsole.log(streamChecker.query('e')); // false\nconsole.log(streamChecker.query('f')); // true\nconsole.log(streamChecker.query('g')); // false\nconsole.log(streamChecker.query('h')); // false\nconsole.log(streamChecker.query('i')); // false\nconsole.log(streamChecker.query('j')); // false\nconsole.log(streamChecker.query('k')); // false\nconsole.log(streamChecker.query('l')); // true",
        "gt": "false\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 38,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Tree",
                "DFS",
                "Recursion"
            ]
        },
        "question": "#include <iostream>\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        return helper(root, 0);\n    }\nprivate:\n    int helper(const TreeNode* root, int val) {\n        if (root == nullptr) return 0;\n        auto ret = root->val + val * 10;\n        if (root->left == nullptr && root->right == nullptr)\n            return ret;\n        auto l = helper(root->left, ret);\n        auto r = helper(root->right, ret);\n        return l + r;\n    }\n};\n\nint main() {\n    TreeNode* root = new TreeNode(4);\n    root->left = new TreeNode(9);\n    root->right = new TreeNode(0);\n    root->left->left = new TreeNode(5);\n    root->left->right = new TreeNode(1);\n\n    Solution solution;\n    cout << solution.sumNumbers(root);\n    return 0;\n}",
        "gt": "1026",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 39,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Palindrome",
                "Backtracking",
                "Partition"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\nclass Solution {\nprivate:\n  vector<vector<string>> ans;\n  vector<string> tmp;\n  bool isPalindrome(string &s, int first, int last) {\n    while (first < last && s[first] == s[last]) ++first, --last;\n    return first >= last;\n  }\n  void dfs(string &s, int start) {\n    if (start == s.size()) { ans.push_back(tmp); return; }\n    for (int i = start; i < s.size(); ++i) {\n      if (isPalindrome(s, start, i)) {\n        tmp.push_back(s.substr(start, i - start + 1));\n        dfs(s, i + 1);\n        tmp.pop_back();\n      }\n    }\n  }\npublic:\n  vector<vector<string>> partition(string s) {\n    dfs(s, 0);\n    return ans;\n  }\n};\nint main() {\n    Solution sol;\n    vector<vector<string>> result = sol.partition(\"aab\");\n    for (const auto& v : result) {\n        for (const string& s : v) {\n            cout << s << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
        "gt": "a a b \naa b",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 9,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "bit manipulation",
                "xor operation",
                "unique element"
            ]
        },
        "question": "var singleNumber = function (nums) {\n    let ret = 0;\n    for (let index = 0; index < nums.length; index++) {\n        const element = nums[index];\n        ret = ret ^ element;\n    }\n    return ret;\n};\nconsole.log(singleNumber([4,1,2,1,2]));",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 25,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Dynamic Programming",
                "String Matching",
                "Memoization"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\nclass Solution {\npublic:\n    bool wordBreak(string s, vector<string>& dict) {\n        unordered_set<string> st(begin(dict), end(dict));\n        int N = s.size();\n        vector<bool> dp(N + 1);\n        dp[0] = true;\n        for (int i = 1; i <= N; ++i) {\n            for (int j = 0; j < i && !dp[i]; ++j) {\n                dp[i] = dp[j] && st.count(s.substr(j, i - j));\n            }\n        }\n        return dp[N];\n    }\n};\nint main() {\n    Solution solution;\n    vector<string> wordDict = {\"leet\", \"code\"};\n    cout << (solution.wordBreak(\"leetcode\", wordDict) ? \"true\" : \"false\") << endl;\n    return 0;\n}",
        "gt": "true",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 27,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "String Matching",
                "CamelCase",
                "Pattern Recognition"
            ]
        },
        "question": "function camelMatch(queries, pattern) {\n    function isMatch(query, pattern) {\n        let i = 0, j = 0;\n        while (i < query.length) {\n            if (j < pattern.length && query[i] === pattern[j]) {\n                i++;\n                j++;\n            } else if (query[i] >= 'a' && query[i] <= 'z') {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return j === pattern.length;\n    }\n\n    const result = [];\n    for (const query of queries) {\n        result.push(isMatch(query, pattern));\n    }\n    return result;\n}\n\n// Test case\nconst queries = [\"FooBar\", \"FooBarTest\", \"FootBall\", \"FrameBuffer\", \"ForceFeedBack\"];\nconst pattern = \"FB\";\nconsole.log(camelMatch(queries, pattern));",
        "gt": "[ true, false, true, true, false ]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 52,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Permutation",
                "Array Manipulation",
                "Optimization"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> prevPermOpt1(vector<int>& arr) {\n        int l = -1;\n        for (int i = arr.size() - 1; i > 0; --i) {\n            if (arr[i - 1] > arr[i]) {\n                l = i - 1;\n                break;\n            }\n        }\n        if (l == -1) return arr;\n\n        int r = -1;\n        for (int i = arr.size() - 1; i > l; --i) {\n            if (arr[i] < arr[l] && arr[i] != arr[i - 1]) {\n                r = i;\n                break;\n            }\n        }\n        if (r == -1) return arr;\n\n        swap(arr[l], arr[r]);\n        return arr;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> arr1 = {3, 2, 1};\n    vector<int> arr2 = {1, 1, 5};\n    vector<int> arr3 = {1, 9, 4, 6, 7};\n\n    auto res1 = solution.prevPermOpt1(arr1);\n    auto res2 = solution.prevPermOpt1(arr2);\n    auto res3 = solution.prevPermOpt1(arr3);\n\n    for (auto num : res1) cout << num << \" \";\n    cout << endl;\n\n    for (auto num : res2) cout << num << \" \";\n    cout << endl;\n\n    for (auto num : res3) cout << num << \" \";\n    cout << endl;\n\n    return 0;\n}",
        "gt": "3 1 2 \n1 1 5 \n1 7 4 6 9",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 18,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Binary Tree",
                "Zigzag Traversal",
                "Math"
            ]
        },
        "question": "class Solution:\n    def pathInZigZagTree(self, label: int) -> list[int]:\n        level = 0\n        res = []\n\n        while 2 ** level - 1 < label:\n            level += 1\n\n        while level > 0:\n            res.insert(0, label)\n            label = 2 ** (level - 1) + 2 ** level - 1 - label\n            label //= 2\n            level -= 1\n\n        return res\n\n# Test case\nprint(','.join(map(str, Solution().pathInZigZagTree(14))))",
        "gt": "1,3,4,14",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 15,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Optimization",
                "Knapsack"
            ]
        },
        "question": "class Solution:\n    def largestNumber(self, cost, target):\n        dp = [0] + [float('-inf')] * target\n        \n        for i in range(9, 0, -1):\n            for j in range(cost[i - 1], target + 1):\n                dp[j] = max(dp[j], dp[j - cost[i - 1]] * 10 + i)\n\n        return str(dp[target]) if dp[target] > 0 else '0'\n\n# Test case\nsolution = Solution()\ncost = [4,3,2,5,6,7,2,5,5]\ntarget = 9\nprint(solution.largestNumber(cost, target))",
        "gt": "7772",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 16,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "bit manipulation",
                "xor operation"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        auto ret = 0;\n        for (auto i : nums) ret ^= i;\n        return ret;\n    }\n};\nint main() {\n    Solution solution;\n    vector<int> nums = {2, 2, 1};\n    cout << solution.singleNumber(nums);\n}",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 55,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Graph Traversal",
                "BFS",
                "Shortest Path"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red_edges, vector<vector<int>>& blue_edges) {\n        vector<int> ans(n, 2 * n);\n        unordered_map<int, vector<int>> neibors_red;\n        unordered_map<int, vector<int>> neibors_blue;\n\n        for(auto &edge: red_edges) {\n            neibors_red[edge[0]].push_back(edge[1]);\n        }\n        for(auto &edge: blue_edges) {\n            neibors_blue[edge[0]].push_back(edge[1]);\n        }\n\n        queue<pair<int, int>> q;\n        q.push({0, -1});\n        q.push({0, 1});\n        int steps = 0;\n\n        while(!q.empty()) {\n            int size = q.size();\n            for(int i = 0; i < size; ++i) {\n                auto [cur, color] = q.front(); q.pop();\n                ans[cur] = min(ans[cur], steps);\n                auto &neibors = color == 1 ? neibors_red : neibors_blue;\n                for(auto nxt: neibors[cur]) {\n                    q.push({nxt, -1 * color});\n                }\n                neibors[cur].clear();\n            }\n            steps++;\n        }\n\n        for(auto &a: ans) {\n            if(a == 2 * n) a = -1;\n        }\n        return ans;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<vector<int>> red_edges = {{0,1},{1,2}};\n    vector<vector<int>> blue_edges = {};\n    vector<int> result = solution.shortestAlternatingPaths(3, red_edges, blue_edges);\n    for(auto x: result) cout << x << \" \";\n    return 0;\n}",
        "gt": "0 1 -1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 92,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "LRU Cache",
                "Doubly Linked List",
                "Hash Map"
            ]
        },
        "question": "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\nstruct DoubleListNode {\n    int key, val;\n    DoubleListNode *pre, *next;\n    DoubleListNode(int k = 0, int v = 0) : key(k), val(v), pre(nullptr), next(nullptr) {}\n};\n\nstruct DoubleList {\n    DoubleListNode *head, *tail;\n\n    DoubleList() {\n        head = new DoubleListNode();\n        tail = new DoubleListNode();\n        head->next = tail;\n        tail->pre = head;\n    }\n\n    void append(DoubleListNode* node) {\n        node->next = head->next;\n        node->pre = head;\n        head->next->pre = node;\n        head->next = node;\n    }\n\n    void remove(DoubleListNode* node) {\n        node->pre->next = node->next;\n        node->next->pre = node->pre;\n    }\n\n    DoubleListNode* removeTail() {\n        DoubleListNode* node = tail->pre;\n        remove(node);\n        return node;\n    }\n};\n\nclass LRUCache {\nprivate:\n    int cap, size;\n    unordered_map<int, DoubleListNode*> cache;\n    DoubleList list;\n\npublic:\n    LRUCache(int capacity) : cap(capacity), size(0) {}\n\n    int get(int key) {\n        if (!cache.count(key)) return -1;\n        DoubleListNode* node = cache[key];\n        list.remove(node);\n        list.append(node);\n        return node->val;\n    }\n\n    void put(int key, int value) {\n        if (cache.count(key)) {\n            DoubleListNode* node = cache[key];\n            node->val = value;\n            list.remove(node);\n            list.append(node);\n        } else {\n            DoubleListNode* newNode = new DoubleListNode(key, value);\n            cache[key] = newNode;\n            list.append(newNode);\n            size++;\n\n            if (size > cap) {\n                DoubleListNode* removed = list.removeTail();\n                cache.erase(removed->key);\n                delete removed;\n                size--;\n            }\n        }\n    }\n};\n\n// Test case\nint main() {\n    LRUCache lRUCache(2);\n    lRUCache.put(1, 1);\n    lRUCache.put(2, 2);\n    cout << lRUCache.get(1) << endl;\n    lRUCache.put(3, 3);\n    cout << lRUCache.get(2) << endl;\n    lRUCache.put(4, 4);\n    cout << lRUCache.get(1) << endl;\n    cout << lRUCache.get(3) << endl;\n    cout << lRUCache.get(4) << endl;\n    return 0;\n}",
        "gt": "1\n-1\n-1\n3\n4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 9,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Probability",
                "Math"
            ]
        },
        "question": "class Solution {\n    nthPersonGetsNthSeat(n) {\n        return n === 1 ? 1 : 0.5;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.nthPersonGetsNthSeat(1)); // Output: 1\nconsole.log(solution.nthPersonGetsNthSeat(2)); // Output: 0.5",
        "gt": "1\n0.5",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 32,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Array",
                "Prefix Sum",
                "Optimization"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {\n        int N = A.size();\n        for (int i = 1; i < N; ++i) {\n            A[i] += A[i - 1];\n        }\n\n        int res = A[L + M - 1], lMax = A[L - 1], mMax = A[M - 1];\n\n        for (int i = L + M; i < N; ++i) {\n            lMax = max(lMax, A[i - M] - A[i - M - L]);\n            mMax = max(mMax, A[i - L] - A[i - L - M]);\n            res = max(res, lMax + A[i] - A[i - M]);\n            res = max(res, mMax + A[i] - A[i - L]);\n        }\n\n        return res;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> A = {0,6,5,2,2,5,1,9,4};\n    cout << solution.maxSumTwoNoOverlap(A, 1, 2);\n    return 0;\n}",
        "gt": "20",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 17,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Optimization",
                "Knapsack"
            ]
        },
        "question": "function largestNumber(cost, target) {\n    const dp = Array(target + 1).fill(-Infinity);\n    dp[0] = 0;\n\n    for (let i = 9; i >= 1; i--) {\n        for (let j = cost[i - 1]; j <= target; j++) {\n            dp[j] = Math.max(dp[j], dp[j - cost[i - 1]] * 10 + i);\n        }\n    }\n\n    return dp[target] > 0 ? dp[target].toString() : \"0\";\n}\n\n// Test case\ncost = [4,3,2,5,6,7,2,5,5];\ntarget = 9;\nconsole.log(largestNumber(cost, target));",
        "gt": "7772",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 85,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Trie",
                "Stream Processing"
            ]
        },
        "question": "#include <iostream>\n#include <unordered_map>\n#include <deque>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    bool isEndOfWord;\n\n    TrieNode() : isEndOfWord(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->isEndOfWord = true;\n    }\n\n    bool search(deque<char>& stream) {\n        TrieNode* node = root;\n        for (char c : stream) {\n            if (node->children.find(c) == node->children.end()) {\n                return false;\n            }\n            node = node->children[c];\n            if (node->isEndOfWord) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n\nclass StreamChecker {\npublic:\n    Trie trie;\n    deque<char> stream;\n\n    StreamChecker(vector<string>& words) {\n        for (string word : words) {\n            reverse(word.begin(), word.end());\n            trie.insert(word);\n        }\n    }\n\n    bool query(char letter) {\n        stream.push_front(letter);\n        return trie.search(stream);\n    }\n};\n\n// Test case\nint main() {\n    vector<string> words = {\"cd\", \"f\", \"kl\"};\n    StreamChecker streamChecker(words);\n    cout << boolalpha; // Print boolean values as true/false\n    cout << streamChecker.query('a') << endl; // false\n    cout << streamChecker.query('b') << endl; // false\n    cout << streamChecker.query('c') << endl; // false\n    cout << streamChecker.query('d') << endl; // true\n    cout << streamChecker.query('e') << endl; // false\n    cout << streamChecker.query('f') << endl; // true\n    cout << streamChecker.query('g') << endl; // false\n    cout << streamChecker.query('h') << endl; // false\n    cout << streamChecker.query('i') << endl; // false\n    cout << streamChecker.query('j') << endl; // false\n    cout << streamChecker.query('k') << endl; // false\n    cout << streamChecker.query('l') << endl; // true\n    return 0;\n}",
        "gt": "false\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 34,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Three Sum",
                "Sorting",
                "Two Pointers"
            ]
        },
        "question": "from typing import List\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        if len(nums) < 3:\n            return []\n        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                break\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[left] + nums[right]\n                if total == 0:\n                    result.append([nums[i], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    right -= 1\n                elif total > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return result\n\n# Test case\nnums = [-1, 0, 1, 2, -1, -4]\nsolution = Solution()\nprint(solution.threeSum(nums))",
        "gt": "[[-1, -1, 2], [-1, 0, 1]]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 16,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "stock",
                "profit"
            ]
        },
        "question": "var maxProfit = function (prices) {\n    let min = prices[0];\n    let profit = 0;\n    for (let i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            profit = Math.max(profit, prices[i] - min);\n        } else {\n            min = Math.min(min, prices[i]);\n        }\n    }\n    return profit;\n};\n\n// Test case\nconst prices = [7,1,5,3,6,4];\nconsole.log(maxProfit(prices));",
        "gt": "5",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 7,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Probability",
                "Math"
            ]
        },
        "question": "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        return 1 if n == 1 else 0.5\n\nsolution = Solution()\nprint(solution.nthPersonGetsNthSeat(1)) # Output: 1\nprint(solution.nthPersonGetsNthSeat(2)) # Output: 0.5",
        "gt": "1\n0.5",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 46,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Custom Stack",
                "Increment Operation"
            ]
        },
        "question": "class CustomStack {\n    constructor(maxSize) {\n        this.st = [];\n        this.cnt = 0;\n        this.size = maxSize;\n        this.incrementals = [];\n    }\n\n    push(x) {\n        if (this.cnt < this.size) {\n            this.st.push(x);\n            this.incrementals.push(0);\n            this.cnt += 1;\n        }\n    }\n\n    pop() {\n        if (this.cnt === 0) return -1;\n        this.cnt -= 1;\n        if (this.cnt >= 1) {\n            this.incrementals[this.cnt - 1] += this.incrementals[this.cnt];\n        }\n        return this.st.pop() + this.incrementals.pop();\n    }\n\n    increment(k, val) {\n        if (this.incrementals.length > 0) {\n            this.incrementals[Math.min(this.cnt, k) - 1] += val;\n        }\n    }\n}\n\n// Test case\nconst customStack = new CustomStack(3);\ncustomStack.push(1);\ncustomStack.push(2);\nconsole.log(customStack.pop()); // 2\ncustomStack.push(2);\ncustomStack.push(3);\ncustomStack.push(4);\ncustomStack.increment(5, 100);\ncustomStack.increment(2, 100);\nconsole.log(customStack.pop()); // 103\nconsole.log(customStack.pop()); // 202\nconsole.log(customStack.pop()); // 201\nconsole.log(customStack.pop()); // -1",
        "gt": "2\n103\n202\n201\n-1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 12,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Stock Trading",
                "Profit Calculation",
                "Array Iteration"
            ]
        },
        "question": "class Solution:\n    def maxProfit(self, prices: list[int]) -> int:\n        profit = 0\n        for i in range(1, len(prices)):\n            tmp = prices[i] - prices[i - 1]\n            if tmp > 0: profit += tmp\n        return profit\n\n# Test case\nprices = [7, 1, 5, 3, 6, 4]\nsolution = Solution()\nprint(solution.maxProfit(prices))",
        "gt": "7",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 27,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Number Theory",
                "Modular Arithmetic",
                "Divisibility"
            ]
        },
        "question": "#include <iostream>\n#include <unordered_set>\nusing namespace std;\n\nclass Solution {\npublic:\n    int smallestRepunitDivByK(int K) {\n        if (K % 10 == 2 || K % 10 == 4 || K % 10 == 5 || K % 10 == 6 || K % 10 == 8) return -1;\n        unordered_set<int> seen;\n        int mod = 0;\n        for (int i = 1; i <= K; ++i) {\n            mod = (mod * 10 + 1) % K;\n            if (seen.find(mod) != seen.end()) return -1;\n            if (mod == 0) return i;\n            seen.insert(mod);\n        }\n        return -1;\n    }\n};\n\nint main() {\n    Solution solution;\n    cout << solution.smallestRepunitDivByK(1) << endl; // 1\n    cout << solution.smallestRepunitDivByK(2) << endl; // -1\n    cout << solution.smallestRepunitDivByK(3) << endl; // 3\n    return 0;\n}",
        "gt": "1\n-1\n3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 18,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Palindrome",
                "Backtracking",
                "Partition"
            ]
        },
        "question": "class Solution:\n    def partition(self, s: str) -> list[list[str]]:\n        res = []\n\n        def helper(s, tmp):\n            if not s:\n                res.append(tmp)\n            for i in range(1, len(s) + 1):\n                if s[:i] == s[:i][::-1]:\n                    helper(s[i:], tmp + [s[:i]])\n\n        helper(s, [])\n        return res\n\nsol = Solution()\nresult = sol.partition(\"aab\")\nfor group in result:\n    print(' '.join(group))",
        "gt": "a a b\naa b",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 17,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "bit manipulation",
                "xor operation",
                "unique element"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        auto ret = 0;\n        for (auto i : nums) ret ^= i;\n        return ret;\n    }\n};\nint main() {\n    Solution solution;\n    vector<int> nums = {4,1,2,1,2};\n    cout << solution.singleNumber(nums);\n    return 0;\n}",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 32,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "array",
                "hashset",
                "consecutive"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nint longestConsecutive(vector<int>& nums) {\n    unordered_set<int> num_set(nums.begin(), nums.end());\n    int max_len = 0;\n\n    for (int num : num_set) {\n        if (num_set.find(num - 1) == num_set.end()) {\n            int current_num = num;\n            int current_streak = 1;\n\n            while (num_set.find(current_num + 1) != num_set.end()) {\n                current_num += 1;\n                current_streak += 1;\n            }\n\n            max_len = max(max_len, current_streak);\n        }\n    }\n\n    return max_len;\n}\n\n// Test case\nint main() {\n    vector<int> nums = {100, 4, 200, 1, 3, 2};\n    cout << longestConsecutive(nums);\n    return 0;\n}",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 38,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Binary Tree",
                "Backtracking",
                "Path Sum"
            ]
        },
        "question": "class TreeNode {\n    constructor(val) {\n        this.val = val;\n        this.left = this.right = null;\n    }\n}\n\nfunction backtrack(root, sum, res, tempList) {\n    if (root === null) return;\n    if (root.left === null && root.right === null && sum === root.val)\n        return res.push([...tempList, root.val]);\n\n    tempList.push(root.val);\n    backtrack(root.left, sum - root.val, res, tempList);\n    backtrack(root.right, sum - root.val, res, tempList);\n    tempList.pop();\n}\n\nfunction pathSum(root, sum) {\n    if (root === null) return [];\n    const res = [];\n    backtrack(root, sum, res, []);\n    return res;\n}\n\n// Test case setup\nconst root = new TreeNode(5);\nroot.left = new TreeNode(4);\nroot.right = new TreeNode(8);\nroot.left.left = new TreeNode(11);\nroot.right.left = new TreeNode(13);\nroot.right.right = new TreeNode(4);\nroot.left.left.left = new TreeNode(7);\nroot.left.left.right = new TreeNode(2);\nroot.right.right.left = new TreeNode(5);\nroot.right.right.right = new TreeNode(1);\n\nconsole.log(pathSum(root, 22));",
        "gt": "[ [ 5, 4, 11, 2 ], [ 5, 8, 4, 5 ] ]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 36,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Backtracking",
                "Memoization"
            ]
        },
        "question": "class Solution {\n    wordBreak(s, wordDict) {\n        const wordSet = new Set(wordDict);\n        const memo = new Map();\n\n        function backtrack(start) {\n            if (memo.has(start)) {\n                return memo.get(start);\n            }\n\n            const ans = [];\n            if (start === s.length) {\n                ans.push('');\n            }\n\n            for (let i = start; i < s.length; i++) {\n                const word = s.slice(start, i + 1);\n                if (wordSet.has(word)) {\n                    const suffixes = backtrack(i + 1);\n                    for (const suffix of suffixes) {\n                        ans.push(word + (suffix ? ' ' : '') + suffix);\n                    }\n                }\n            }\n\n            memo.set(start, ans);\n            return ans;\n        }\n\n        return backtrack(0);\n    }\n}\n\n// Test case\nconst solution = new Solution();\nconsole.log(solution.wordBreak(\"catsanddog\", [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]));",
        "gt": "[ 'cat sand dog', 'cats and dog' ]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 31,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Search",
                "Greedy",
                "Shipping"
            ]
        },
        "question": "from typing import List\n\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        def possible(mid):\n            days = 1\n            cur = 0\n            for w in weights:\n                if w > mid:\n                    return False\n                if cur + w > mid:\n                    cur = 0\n                    days += 1\n                cur += w\n            return days <= D\n\n        l, r = max(weights), sum(weights)\n\n        while l < r:\n            mid = (l + r) // 2\n            if possible(mid):\n                r = mid\n            else:\n                l = mid + 1\n        return l\n\n# Test case\nweights = [1,2,3,4,5,6,7,8,9,10]\nD = 5\nsolution = Solution()\nprint(solution.shipWithinDays(weights, D))",
        "gt": "15",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 23,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "sliding window",
                "array optimization",
                "subarray sum"
            ]
        },
        "question": "from typing import List\n\nclass Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        n = len(cardPoints)\n        total_sum = sum(cardPoints)\n\n        if k == n:\n            return total_sum\n\n        window_size = n - k\n        window_sum = sum(cardPoints[:window_size])\n\n        min_window_sum = window_sum\n        for i in range(window_size, n):\n            window_sum += cardPoints[i] - cardPoints[i - window_size]\n            min_window_sum = min(min_window_sum, window_sum)\n\n        return total_sum - min_window_sum\n\n# Test case\nsolution = Solution()\nprint(solution.maxScore([1,2,3,4,5,6,1], 3))",
        "gt": "12",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 35,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Search Tree",
                "Recursion",
                "Tree Construction"
            ]
        },
        "question": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sortedArrayToBST(self, nums):\n        if not nums: return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root\n\ndef serializeTree(root):\n    if not root: return \"null\"\n    result = []\n    queue = [root]\n    while queue:\n        node = queue.pop(0)\n        if node:\n            result.append(str(node.val))\n            queue.append(node.left)\n            queue.append(node.right)\n        else:\n            result.append(\"null\")\n    while result and result[-1] == \"null\":\n        result.pop()\n    return f\"[{','.join(result)}]\"\n\ntest_array = [-10, -3, 0, 5, 9]\nsolution = Solution()\ntree_root = solution.sortedArrayToBST(test_array)\nprint(serializeTree(tree_root))",
        "gt": "[0,-3,9,-10,null,5]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 20,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "domino pairs",
                "equivalence",
                "bit manipulation"
            ]
        },
        "question": "class Solution {\n    numEquivDominoPairs(dominoes) {\n        const counts = new Array(1024).fill(0);\n        let ans = 0;\n        for (const [a, b] of dominoes) {\n            let v;\n            if (a >= b) {\n                v = (a << 5) | b;\n            } else {\n                v = (b << 5) | a;\n            }\n            ans += counts[v];\n            counts[v] += 1;\n        }\n        return ans;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.numEquivDominoPairs([[1,2],[2,1],[3,4],[5,6]]));",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 52,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Sliding Window",
                "Deque",
                "Subarray"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <deque>\nusing namespace std;\n\nclass Solution {\npublic:\n    int longestSubarray(vector<int>& nums, int limit) {\n        deque<int> maxDeque, minDeque;\n        int left = 0, result = 0;\n\n        for (int right = 0; right < nums.size(); ++right) {\n            while (!maxDeque.empty() && nums[right] > maxDeque.back()) {\n                maxDeque.pop_back();\n            }\n            maxDeque.push_back(nums[right]);\n\n            while (!minDeque.empty() && nums[right] < minDeque.back()) {\n                minDeque.pop_back();\n            }\n            minDeque.push_back(nums[right]);\n\n            while (maxDeque.front() - minDeque.front() > limit) {\n                if (nums[left] == maxDeque.front()) {\n                    maxDeque.pop_front();\n                }\n                if (nums[left] == minDeque.front()) {\n                    minDeque.pop_front();\n                }\n                left++;\n            }\n\n            result = max(result, right - left + 1);\n        }\n\n        return result;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums1 = {8, 2, 4, 7};\n    cout << solution.longestSubarray(nums1, 4) << endl; // Output: 2\n\n    vector<int> nums2 = {10, 1, 2, 4, 7, 2};\n    cout << solution.longestSubarray(nums2, 5) << endl; // Output: 4\n\n    vector<int> nums3 = {4, 2, 2, 2, 4, 4, 2, 2};\n    cout << solution.longestSubarray(nums3, 0) << endl; // Output: 3\n\n    return 0;\n}",
        "gt": "2\n4\n3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 27,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "substring",
                "frequency",
                "sliding window"
            ]
        },
        "question": "#include <iostream>\n#include <unordered_map>\n#include <unordered_set>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxFreq(string s, int maxLetters, int minSize, int maxSize) {\n        unordered_map<string, int> counter;\n        int res = 0;\n        for (int i = 0; i <= (int)(s.length() - minSize); ++i) {\n            string sub = s.substr(i, minSize);\n            unordered_set<char> letters(sub.begin(), sub.end());\n            if (letters.size() <= maxLetters) {\n                counter[sub]++;\n                res = max(res, counter[sub]);\n            }\n        }\n        return res;\n    }\n};\n\nint main() {\n    Solution solution;\n    cout << solution.maxFreq(\"aababcaab\", 2, 3, 4);\n    return 0;\n}",
        "gt": "2",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 35,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "Binary Tree",
                "Level Order",
                "BFS"
            ]
        },
        "question": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> list[list[int]]:\n        if root is None:\n            return []\n\n        result = []\n\n        def add_to_result(level, node):\n            if level > len(result) - 1:\n                result.append([])\n\n            result[level].append(node.val)\n            if node.left:\n                add_to_result(level + 1, node.left)\n            if node.right:\n                add_to_result(level + 1, node.right)\n\n        add_to_result(0, root)\n        return result\n\nif __name__ == \"__main__\":\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.right.left = TreeNode(15)\n    root.right.right = TreeNode(7)\n\n    solution = Solution()\n    print(solution.levelOrder(root))",
        "gt": "[[3], [9, 20], [15, 7]]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 23,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Palindrome Partitioning"
            ]
        },
        "question": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        palindrome_pairs = [[True] * n for _ in range(n)]\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                palindrome_pairs[i][j] = (s[i] == s[j]) and palindrome_pairs[i + 1][j - 1]\n\n        dp = [float(\"inf\")] * n\n        dp[0] = 0\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if palindrome_pairs[0][j]:\n                    dp[j] = 0\n                elif palindrome_pairs[i + 1][j]:\n                    dp[j] = min(dp[j], dp[i] + 1)\n\n        return dp[-1]\n\nsolution = Solution()\nprint(solution.minCut(\"aab\"))",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 15,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "XOR Operation",
                "Prefix Sum",
                "Array Queries"
            ]
        },
        "question": "from typing import List\n\nclass Solution:\n    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:\n        pre = [0]\n        res = []\n        for i in range(len(arr)):\n            pre.append(pre[i] ^ arr[i])\n        for L, R in queries:\n            res.append(pre[L] ^ pre[R + 1])\n        return res\n\n# Test case\nsolution = Solution()\nprint(solution.xorQueries([1,3,4,8], [[0,1],[1,2],[0,3],[3,3]]))",
        "gt": "[2, 7, 14, 8]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 15,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Two Sum",
                "Hash Map",
                "Array"
            ]
        },
        "question": "const twoSum = function (nums, target) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const diff = target - nums[i];\n    if (map.has(diff)) {\n      return [map.get(diff), i];\n    }\n    map.set(nums[i], i);\n  }\n};\n\n// Test case\nconst nums = [2, 7, 11, 15];\nconst target = 9;\nconsole.log(twoSum(nums, target));",
        "gt": "[ 0, 1 ]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 22,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Array",
                "Prefix Sum",
                "Optimization"
            ]
        },
        "question": "class Solution {\n    maxSumTwoNoOverlap(A, L, M) {\n        const N = A.length;\n        for (let i = 1; i < N; i++) {\n            A[i] += A[i - 1];\n        }\n\n        let res = A[L + M - 1], lMax = A[L - 1], mMax = A[M - 1];\n\n        for (let i = L + M; i < N; i++) {\n            lMax = Math.max(lMax, A[i - M] - A[i - M - L]);\n            mMax = Math.max(mMax, A[i - L] - A[i - L - M]);\n            res = Math.max(res, lMax + A[i] - A[i - M]);\n            res = Math.max(res, mMax + A[i] - A[i - L]);\n        }\n\n        return res;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.maxSumTwoNoOverlap([0,6,5,2,2,5,1,9,4], 1, 2));",
        "gt": "20",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 23,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Sliding Window",
                "Array Manipulation",
                "Max Consecutive Ones"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint longestOnes(vector<int>& A, int K) {\n    int i = 0;\n    for (int j = 0; j < A.size(); j++) {\n        K -= 1 - A[j];\n        if (K < 0) {\n            K += 1 - A[i];\n            i++;\n        }\n    }\n    return A.size() - i;\n}\n\n// Test case\nint main() {\n    vector<int> A = {1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0};\n    int K = 2;\n    cout << longestOnes(A, K);\n    return 0;\n}",
        "gt": "6",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 31,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Search Tree",
                "Recursion",
                "Divide and Conquer"
            ]
        },
        "question": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sortedArrayToBST(self, nums):\n        if not nums: return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root\n\n# Test case\ndef serializeTree(root):\n    result = []\n    def dfs(node):\n        if not node:\n            result.append('null')\n            return\n        result.append(str(node.val))\n        dfs(node.left)\n        dfs(node.right)\n    dfs(root)\n    return ','.join(result)\n\nsolution = Solution()\nresult = solution.sortedArrayToBST([-10, -3, 0, 5, 9])\nprint(serializeTree(result))",
        "gt": "0,-3,-10,null,null,null,9,5,null,null,null",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 34,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Binary Tree",
                "BFS",
                "Depth"
            ]
        },
        "question": "class TreeNode {\n  constructor(val) {\n    this.val = val;\n    this.left = this.right = null;\n  }\n}\n\nfunction maxDepth(root) {\n  if (!root) return 0;\n  const queue = [root, null];\n  let depth = 1;\n\n  while (queue.length > 0) {\n    const node = queue.shift();\n    if (node === null) {\n      if (queue.length === 0) return depth;\n      depth++;\n      queue.push(null);\n      continue;\n    }\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n  }\n\n  return depth;\n}\n\n// Test case\nconst root = new TreeNode(3);\nroot.left = new TreeNode(9);\nroot.right = new TreeNode(20);\nroot.right.left = new TreeNode(15);\nroot.right.right = new TreeNode(7);\nconsole.log(maxDepth(root));",
        "gt": "3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 49,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Search Tree",
                "Recursion",
                "Tree Construction"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        return reBuild(nums, 0, nums.size() - 1);\n    }\n\nprivate:\n    TreeNode* reBuild(vector<int>& nums, int left, int right) {\n        if (left > right) return NULL;\n        int mid = (left + right) / 2;\n        TreeNode* root = new TreeNode(nums[mid]);\n        root->left = reBuild(nums, left, mid - 1);\n        root->right = reBuild(nums, mid + 1, right);\n        return root;\n    }\n};\nvoid serializeTree(TreeNode* root, vector<string>& result) {\n    if (!root) {\n        result.push_back(\"null\");\n        return;\n    }\n    result.push_back(to_string(root->val));\n    serializeTree(root->left, result);\n    serializeTree(root->right, result);\n}\nint main() {\n    Solution solution;\n    vector<int> nums = {-10, -3, 0, 5, 9};\n    TreeNode* root = solution.sortedArrayToBST(nums);\n    vector<string> result;\n    serializeTree(root, result);\n    while (!result.empty() && result.back() == \"null\") result.pop_back();\n    cout << \"[\";\n    for (size_t i = 0; i < result.size(); ++i) {\n        cout << result[i];\n        if (i != result.size() - 1) cout << \",\";\n    }\n    cout << \"]\";\n    return 0;\n}",
        "gt": "[0,-10,null,-3,null,null,5,null,9]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 34,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "alphabet board",
                "pathfinding",
                "string manipulation"
            ]
        },
        "question": "class Solution {\n    alphabetBoardPath(target) {\n        const board = [];\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 5; j++) {\n                board.push([i, j]);\n            }\n        }\n        board.push([5, 0]);\n\n        let last_x = 0, last_y = 0;\n        let ans = '';\n\n        for (const c of target) {\n            const idx = c.charCodeAt(0) - 'a'.charCodeAt(0);\n            const [nxt_x, nxt_y] = board[idx];\n\n            const up = Math.max(0, last_x - nxt_x);\n            const down = Math.max(0, nxt_x - last_x);\n            const left = Math.max(0, last_y - nxt_y);\n            const right = Math.max(0, nxt_y - last_y);\n\n            ans += 'U'.repeat(up) + 'L'.repeat(left) + 'D'.repeat(down) + 'R'.repeat(right) + '!';\n\n            [last_x, last_y] = [nxt_x, nxt_y];\n        }\n\n        return ans;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.alphabetBoardPath(\"leet\")); // DDR!UURRR!!DDD!\nconsole.log(solution.alphabetBoardPath(\"code\")); // RR!DDRR!UUL!R!",
        "gt": "DDR!UURRR!!DDD!\nRR!DDRR!UUL!R!",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 24,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "bit-manipulation",
                "substring",
                "vowels"
            ]
        },
        "question": "class Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        mapper = { 'a': 1, 'e': 2, 'i': 4, 'o': 8, 'u': 16 }\n        seen = { 0: -1 }\n        res = cur = 0\n\n        for i in range(len(s)):\n            if s[i] in mapper:\n                cur ^= mapper.get(s[i])\n            if cur in seen:\n                res = max(res, i - seen.get(cur))\n            else:\n                seen[cur] = i\n\n        return res\n\n# Test case\nclass Main:\n    def run(self):\n        solution = Solution()\n        input_str = \"eleetminicoworoep\"\n        print(solution.findTheLongestSubstring(input_str))  # Expected output: 13\n\nMain().run()",
        "gt": "13",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 31,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Tree",
                "Preorder Traversal",
                "Stack"
            ]
        },
        "question": "class TreeNode {\n    constructor(val, left = null, right = null) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nfunction preorderTraversal(root) {\n    if (!root) return [];\n    const ret = [];\n    const stack = [root];\n    let t = stack.pop();\n\n    while (t) {\n        if (t.right) {\n            stack.push(t.right);\n        }\n        if (t.left) {\n            stack.push(t.left);\n        }\n        ret.push(t.val);\n        t = stack.pop();\n    }\n\n    return ret;\n}\n\n// Test case\nconst root = new TreeNode(1, null, new TreeNode(2, new TreeNode(3)));\nconsole.log(preorderTraversal(root));",
        "gt": "[ 1, 2, 3 ]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 27,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "bit-manipulation",
                "substring",
                "vowels"
            ]
        },
        "question": "const mapper = { 'a': 1, 'e': 2, 'i': 4, 'o': 8, 'u': 16 };\nfunction findTheLongestSubstring(s) {\n    let max = 0, cur = 0;\n    const seen = { 0: -1 };\n\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] in mapper) {\n            cur ^= mapper[s[i]];\n        }\n        if (cur in seen) {\n            max = Math.max(max, i - seen[cur]);\n        } else {\n            seen[cur] = i;\n        }\n    }\n\n    return max;\n}\n\n// Test case\nclass Solution {\n    solve() {\n        const input = \"eleetminicoworoep\";\n        console.log(findTheLongestSubstring(input)); // Expected output: 13\n    }\n}\nnew Solution().solve();",
        "gt": "13",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 31,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Graph Traversal",
                "BFS",
                "Shortest Path"
            ]
        },
        "question": "from collections import defaultdict, deque\n\nclass Solution:\n    def shortestAlternatingPaths(self, n, red_edges, blue_edges):\n        ans = [2 * n] * n\n        neibors_red = defaultdict(list)\n        neibors_blue = defaultdict(list)\n\n        for fr, to in red_edges:\n            neibors_red[fr].append(to)\n        for fr, to in blue_edges:\n            neibors_blue[fr].append(to)\n\n        q = deque([(0, -1), (0, 1)])\n        steps = 0\n\n        while q:\n            for _ in range(len(q)):\n                cur, color = q.popleft()\n                ans[cur] = min(ans[cur], steps)\n                neibors = neibors_red if color == 1 else neibors_blue\n                for nxt in neibors[cur]:\n                    q.append((nxt, -1 * color))\n                neibors[cur] = []\n            steps += 1\n\n        return [-1 if a == 2 * n else a for a in ans]\n\n# Test case\nsolution = Solution()\nprint(solution.shortestAlternatingPaths(3, [[0,1],[1,2]], []))",
        "gt": "[0, 1, -1]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 9,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "bit manipulation",
                "xor operation"
            ]
        },
        "question": "class Solution:\n    def singleNumber(self, nums):\n        single_number = 0\n        for num in nums:\n            single_number ^= num\n        return single_number\n\nsolution = Solution()\nprint(solution.singleNumber([2, 2, 1]))",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 50,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Linked List",
                "Binary Search Tree",
                "Divide and Conquer"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nTreeNode* sortedListToBST(ListNode* head);\nTreeNode* run(ListNode* head, ListNode* tail);\n\nTreeNode* sortedListToBST(ListNode* head) {\n    if (!head) return NULL;\n    return run(head, NULL);\n}\n\nTreeNode* run(ListNode* head, ListNode* tail) {\n    if (head == tail) return NULL;\n    ListNode* fast = head;\n    ListNode* slow = head;\n    while (fast != tail && fast->next != tail) {\n        fast = fast->next->next;\n        slow = slow->next;\n    }\n    TreeNode* root = new TreeNode(slow->val);\n    root->left = run(head, slow);\n    root->right = run(slow->next, tail);\n    return root;\n}\n\n// Test case\nint main() {\n    ListNode* head = new ListNode(-10);\n    head->next = new ListNode(-3);\n    head->next->next = new ListNode(0);\n    head->next->next->next = new ListNode(5);\n    head->next->next->next->next = new ListNode(9);\n    TreeNode* result = sortedListToBST(head);\n    cout << \"[0,-3,9,-10,null,5]\";\n    return 0;\n}",
        "gt": "[0,-3,9,-10,null,5]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 30,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Linked List",
                "Stack",
                "Next Greater Element"
            ]
        },
        "question": "class ListNode:\n    def __init__(self, x=0, next=None):\n        self.val = x\n        self.next = next\n\nclass Solution:\n    def nextLargerNodes(self, head):\n        res, st = [], []\n\n        while head:\n            while st and head.val > st[-1][1]:\n                res[st.pop()[0]] = head.val\n            st.append((len(res), head.val))\n            res.append(0)\n            head = head.next\n\n        return res\n\n# Test case\ndef create_linked_list(arr):\n    dummy = ListNode()\n    current = dummy\n    for num in arr:\n        current.next = ListNode(num)\n        current = current.next\n    return dummy.next\n\nsolution = Solution()\nhead = create_linked_list([2, 1, 5])\nprint(solution.nextLargerNodes(head))",
        "gt": "[5, 5, 0]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 40,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "Binary Tree",
                "Symmetry",
                "Recursion"
            ]
        },
        "question": "#include <iostream>\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        return root == NULL ? true : recur(root->left, root->right);\n    }\n\n    bool recur(TreeNode* l, TreeNode* r) {\n        if (l == NULL && r == NULL) {\n            return true;\n        }\n        if (l == NULL || r == NULL || l->val != r->val) {\n            return false;\n        }\n        return recur(l->left, r->right) && recur(l->right, r->left);\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    TreeNode* tree = new TreeNode(1);\n    tree->left = new TreeNode(2);\n    tree->right = new TreeNode(2);\n    tree->left->left = new TreeNode(3);\n    tree->left->right = new TreeNode(4);\n    tree->right->left = new TreeNode(4);\n    tree->right->right = new TreeNode(3);\n    cout << solution.isSymmetric(tree);\n    return 0;\n}",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 31,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Two Sum",
                "Hash Table",
                "Array"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> hashtable;\n        for (int i = 0; i < nums.size(); ++i) {\n            auto it = hashtable.find(target - nums[i]);\n            if (it != hashtable.end()) {\n                return {it->second, i};\n            }\n            hashtable[nums[i]] = i;\n        }\n        return {};\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> nums = {2, 7, 11, 15};\n    int target = 9;\n    vector<int> result = solution.twoSum(nums, target);\n    for (int index : result) {\n        cout << index << \" \";\n    }\n    return 0;\n}",
        "gt": "0 1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 32,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "bit manipulation",
                "substring",
                "vowels"
            ]
        },
        "question": "#include <iostream>\n#include <unordered_map>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    int findTheLongestSubstring(string s) {\n        unordered_map<char, int> mapper = {{'a', 1}, {'e', 2}, {'i', 4}, {'o', 8}, {'u', 16}};\n        unordered_map<int, int> seen;\n        seen[0] = -1;\n        int res = 0, cur = 0;\n\n        for (int i = 0; i < s.size(); ++i) {\n            if (mapper.count(s[i])) {\n                cur ^= mapper[s[i]];\n            }\n            if (seen.count(cur)) {\n                res = max(res, i - seen[cur]);\n            } else {\n                seen[cur] = i;\n            }\n        }\n        return res;\n    }\n};\n\nint main() {\n    Solution solution;\n    cout << solution.findTheLongestSubstring(\"eleetminicoworoep\") << endl;\n    return 0;\n}",
        "gt": "13",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 39,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Search",
                "Greedy",
                "Shipping"
            ]
        },
        "question": "function shipWithinDays(weights, D) {\n    let high = weights.reduce((acc, cur) => acc + cur);\n    let low = Math.max(...weights);\n\n    while (low < high) {\n        let mid = Math.floor((high + low) / 2);\n        if (canShip(mid)) {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    return low;\n\n    function canShip(opacity) {\n        let remain = opacity;\n        let count = 1;\n        for (let weight of weights) {\n            if (weight > opacity) {\n                return false;\n            }\n            remain -= weight;\n            if (remain < 0) {\n                count++;\n                remain = opacity - weight;\n            }\n            if (count > D) {\n                return false;\n            }\n        }\n        return count <= D;\n    }\n}\n\n// Test case\nconst weights = [1,2,3,4,5,6,7,8,9,10];\nconst D = 5;\nconsole.log(shipWithinDays(weights, D));",
        "gt": "15",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 29,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Backtracking",
                "Memoization"
            ]
        },
        "question": "from typing import List\nfrom functools import lru_cache\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        n = len(s)\n        word_set = set(wordDict)\n\n        @lru_cache(None)\n        def backtrack(start):\n            ans = []\n            if start == n:\n                ans.append('')\n            for i in range(start, n):\n                if s[start:i + 1] in word_set:\n                    if start == 0:\n                        temp = s[start:i + 1]\n                    else:\n                        temp = \" \" + s[start:i + 1]\n                    ps = backtrack(i + 1)\n                    for p in ps:\n                        ans.append(temp + p)\n            return ans\n\n        return backtrack(0)\n\n# Test case\nsolution = Solution()\nprint(solution.wordBreak(\"catsanddog\", [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]))",
        "gt": "['cat sand dog', 'cats and dog']",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 18,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "stock",
                "profit"
            ]
        },
        "question": "class Solution:\n    def maxProfit(self, prices: 'List[int]') -> int:\n        if not prices: return 0\n\n        min_price = float('inf')\n        max_profit = 0\n\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif max_profit < price - min_price:\n                max_profit = price - min_price\n        return max_profit\n\n# Test case\nsolution = Solution()\nprices = [7,1,5,3,6,4]\nprint(solution.maxProfit(prices))",
        "gt": "5",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 26,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "Binary Tree",
                "Symmetry",
                "Recursion"
            ]
        },
        "question": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        def dfs(root1, root2):\n            if root1 == root2 == None: return True\n            if not root1 or not root2: return False\n            if root1.val != root2.val: return False\n            return dfs(root1.left, root2.right) and dfs(root1.right, root2.left)\n        if not root: return True\n        return dfs(root.left, root.right)\n\n# Test case\nsolution = Solution()\ntree = TreeNode(1)\ntree.left = TreeNode(2)\ntree.right = TreeNode(2)\ntree.left.left = TreeNode(3)\ntree.left.right = TreeNode(4)\ntree.right.left = TreeNode(4)\ntree.right.right = TreeNode(3)\nprint(solution.isSymmetric(tree))",
        "gt": "True",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 14,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Stock Trading",
                "Profit Maximization",
                "Array Iteration"
            ]
        },
        "question": "from typing import List\n\ndef maxProfit(prices: List[int]) -> int:\n    profit = 0\n\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i - 1]:\n            profit += prices[i] - prices[i - 1]\n\n    return profit\n\n# Test case\nprices = [7, 1, 5, 3, 6, 4]\nprint(maxProfit(prices))",
        "gt": "7",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 39,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Linked List",
                "Stack",
                "Next Greater Element"
            ]
        },
        "question": "class ListNode {\n    constructor(val = 0, next = null) {\n        this.val = val;\n        this.next = next;\n    }\n}\n\nclass Solution {\n    nextLargerNodes(head) {\n        const res = [];\n        const stack = [];\n\n        while (head) {\n            while (stack.length > 0 && head.val > stack[stack.length - 1][1]) {\n                res[stack.pop()[0]] = head.val;\n            }\n            stack.push([res.length, head.val]);\n            res.push(0);\n            head = head.next;\n        }\n\n        return res;\n    }\n}\n\n// Test case\nfunction createLinkedList(arr) {\n    let dummy = new ListNode();\n    let current = dummy;\n    for (let num of arr) {\n        current.next = new ListNode(num);\n        current = current.next;\n    }\n    return dummy.next;\n}\n\nconst solution = new Solution();\nconst head = createLinkedList([2, 1, 5]);\nconsole.log(solution.nextLargerNodes(head));",
        "gt": "[ 5, 5, 0 ]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 19,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "array",
                "hashset",
                "consecutive"
            ]
        },
        "question": "def longestConsecutive(nums):\n    num_set = set(nums)\n    max_len = 0\n\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n\n            max_len = max(max_len, current_streak)\n\n    return max_len\n\n# Test case\nprint(longestConsecutive([100, 4, 200, 1, 3, 2]))",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 45,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Binary Search",
                "Greedy",
                "Shipping"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <numeric>\nusing namespace std;\n\nclass Solution {\npublic:\n    int shipWithinDays(vector<int>& weights, int D) {\n        int lo = 0;\n        int hi = accumulate(weights.begin(), weights.end(), 0);\n\n        auto canShip = [&](int opacity) -> bool {\n            int days = 1;\n            int remain = opacity;\n            for(auto weight : weights){\n                if(weight > opacity) return false;\n                remain -= weight;\n                if(remain < 0){\n                    days++;\n                    remain = opacity - weight;\n                }\n            }\n            return days <= D;\n        };\n\n        while(lo < hi){\n            int mid = lo + (hi - lo) / 2;\n            if(canShip(mid)){\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n\n        return lo;\n    }\n};\n\nint main(){\n    Solution solution;\n    vector<int> weights = {1,2,3,4,5,6,7,8,9,10};\n    int D = 5;\n    cout << solution.shipWithinDays(weights, D);\n    return 0;\n}",
        "gt": "15",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 30,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Search Tree",
                "Recursion",
                "Tree Construction"
            ]
        },
        "question": "class TreeNode { constructor(val, left = null, right = null) { this.val = val; this.left = left; this.right = right; } }\nfunction sortedArrayToBST(nums) {\n    if (nums.length === 0) return null;\n    const mid = nums.length >> 1;\n    const root = new TreeNode(nums[mid]);\n\n    root.left = sortedArrayToBST(nums.slice(0, mid));\n    root.right = sortedArrayToBST(nums.slice(mid + 1));\n    return root;\n}\nfunction serializeTree(root) {\n    if (!root) return \"null\";\n    let result = [];\n    let queue = [root];\n    while (queue.length > 0) {\n        let node = queue.shift();\n        if (node) {\n            result.push(node.val);\n            queue.push(node.left);\n            queue.push(node.right);\n        } else {\n            result.push(\"null\");\n        }\n    }\n    while (result[result.length - 1] === \"null\") result.pop();\n    return `[${result.join(\",\")}]`;\n}\nconst testArray = [-10, -3, 0, 5, 9];\nconst treeRoot = sortedArrayToBST(testArray);\nconsole.log(serializeTree(treeRoot));",
        "gt": "[0,-3,9,-10,null,5]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 23,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Backtracking",
                "Word Score",
                "Letter Frequency"
            ]
        },
        "question": "const maxScoreWords = (words, letters, score) => {\n    let ans = 0;\n    const wordsScore = words.map(word => [...word].reduce((sum, c) => sum + score[c.charCodeAt(0) - 'a'.charCodeAt(0)], 0));\n    const wordsCounter = words.map(word => [...word].reduce((counter, c) => { counter[c] = (counter[c] || 0) + 1; return counter; }, {}));\n\n    const backtrack = (start, cur, counter) => {\n        if (start > words.length) return;\n        ans = Math.max(ans, cur);\n        for (let j = start; j < wordsCounter.length; j++) {\n            const wCounter = wordsCounter[j];\n            if (Object.keys(wCounter).every(c => (counter[c] || 0) >= wCounter[c])) {\n                const newCounter = { ...counter };\n                Object.keys(wCounter).forEach(c => newCounter[c] -= wCounter[c]);\n                backtrack(j + 1, cur + wordsScore[j], newCounter);\n            }\n        }\n    };\n\n    const initialCounter = letters.reduce((counter, c) => { counter[c] = (counter[c] || 0) + 1; return counter; }, {});\n    backtrack(0, 0, initialCounter);\n    return ans;\n};\nconsole.log(maxScoreWords([\"dog\",\"cat\",\"dad\",\"good\"], [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]));",
        "gt": "23",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 85,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "LRU Cache",
                "Doubly Linked List",
                "Hash Map"
            ]
        },
        "question": "class ListNode {\n    constructor(key, val) {\n        this.key = key;\n        this.val = val;\n        this.pre = null;\n        this.next = null;\n    }\n}\n\nclass LRUCache {\n    constructor(capacity) {\n        this.capacity = capacity;\n        this.size = 0;\n        this.data = {};\n        this.head = new ListNode();\n        this.tail = new ListNode();\n        this.head.next = this.tail;\n        this.tail.pre = this.head;\n    }\n\n    get(key) {\n        if (!this.data[key]) return -1;\n        else {\n            let node = this.data[key];\n            this.removeNode(node);\n            this.appendHead(node);\n            return node.val;\n        }\n    }\n\n    put(key, value) {\n        if (!this.data[key]) {\n            let node = new ListNode(key, value);\n            this.data[key] = node;\n            this.appendHead(node);\n            this.size++;\n\n            if (this.size > this.capacity) {\n                const lastKey = this.removeTail();\n                delete this.data[lastKey];\n                this.size--;\n            }\n        } else {\n            let node = this.data[key];\n            this.removeNode(node);\n            node.val = value;\n            this.appendHead(node);\n        }\n    }\n\n    removeNode(node) {\n        let preNode = node.pre;\n        let nextNode = node.next;\n\n        preNode.next = nextNode;\n        nextNode.pre = preNode;\n    }\n\n    appendHead(node) {\n        let firstNode = this.head.next;\n\n        this.head.next = node;\n        node.pre = this.head;\n        node.next = firstNode;\n        firstNode.pre = node;\n    }\n\n    removeTail() {\n        let key = this.tail.pre.key;\n        this.removeNode(this.tail.pre);\n        return key;\n    }\n}\n\n// Test case\nconst lRUCache = new LRUCache(2);\nlRUCache.put(1, 1);\nlRUCache.put(2, 2);\nconsole.log(lRUCache.get(1));\nlRUCache.put(3, 3);\nconsole.log(lRUCache.get(2));\nlRUCache.put(4, 4);\nconsole.log(lRUCache.get(1));\nconsole.log(lRUCache.get(3));\nconsole.log(lRUCache.get(4));",
        "gt": "1\n-1\n-1\n3\n4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 34,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Three Sum",
                "Sorting",
                "Two Pointers"
            ]
        },
        "question": "var threeSum = function (nums) {\n  if (nums.length < 3) return [];\n  const list = [];\n  nums.sort((a, b) => a - b);\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) break;\n    if (i > 0 && nums[i] === nums[i - 1]) continue;\n    let left = i + 1;\n    let right = nums.length - 1;\n\n    while (left < right) {\n      if (nums[left] + nums[right] + nums[i] === 0) {\n        list.push([nums[i], nums[left], nums[right]]);\n        while (nums[left] === nums[left + 1]) {\n          left++;\n        }\n        left++;\n        while (nums[right] === nums[right - 1]) {\n          right--;\n        }\n        right--;\n      } else if (nums[left] + nums[right] + nums[i] > 0) {\n        right--;\n      } else {\n        left++;\n      }\n    }\n  }\n  return list;\n};\n\n// Test case\nconst nums = [-1, 0, 1, 2, -1, -4];\nconsole.log(threeSum(nums));",
        "gt": "[ [ -1, -1, 2 ], [ -1, 0, 1 ] ]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 24,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Stock Trading",
                "Profit Maximization",
                "Array Iteration"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int res = 0;\n        for(int i = 1; i < prices.size(); i++) {\n            if(prices[i] > prices[i-1]) {\n                res += prices[i] - prices[i-1];\n            }\n        }\n        return res;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> prices = {7, 1, 5, 3, 6, 4};\n    cout << solution.maxProfit(prices);\n    return 0;\n}",
        "gt": "7",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 44,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "BFS",
                "Graph",
                "Shortest Path"
            ]
        },
        "question": "class Solution {\n    minJumps(arr) {\n        const n = arr.length;\n        if (n === 1) return 0;\n\n        const graph = new Map();\n        for (let i = 0; i < n; i++) {\n            if (!graph.has(arr[i])) {\n                graph.set(arr[i], []);\n            }\n            graph.get(arr[i]).push(i);\n        }\n\n        const visited = new Set();\n        visited.add(0);\n        const queue = [[0, 0]];\n\n        while (queue.length > 0) {\n            const [node, steps] = queue.shift();\n\n            if (node === n - 1) {\n                return steps;\n            }\n\n            const neighbors = graph.has(arr[node]) ? graph.get(arr[node]) : [];\n            neighbors.push(node - 1, node + 1);\n\n            for (const neighbor of neighbors) {\n                if (neighbor >= 0 && neighbor < n && !visited.has(neighbor)) {\n                    visited.add(neighbor);\n                    queue.push([neighbor, steps + 1]);\n                }\n            }\n\n            graph.delete(arr[node]);\n        }\n\n        return -1;\n    }\n}\n\n// Test case\nconst solution = new Solution();\nconsole.log(solution.minJumps([100,-23,-23,404,100,23,23,23,3,404]));",
        "gt": "3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 27,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Palindrome",
                "String",
                "Two Pointers"
            ]
        },
        "question": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        if (s.empty())\n            return true;\n        const char* s1 = s.c_str();\n        const char* e = s1 + s.length() - 1;\n        while (e > s1) {\n            if (!isalnum(*s1)) { ++s1; continue; }\n            if (!isalnum(*e)) { --e; continue; }\n            if (tolower(*s1) != tolower(*e)) return false;\n            else { --e; ++s1; }\n        }\n        return true;\n    }\n};\n\nint main() {\n    Solution sol;\n    cout << sol.isPalindrome(\"A man, a plan, a canal: Panama\");\n    return 0;\n}",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 19,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "array",
                "hashset",
                "consecutive"
            ]
        },
        "question": "function longestConsecutive(nums) {\n    const set = new Set(nums);\n    let max = 0;\n\n    for (let x of set) {\n        if (!set.has(x - 1)) {\n            let y = x + 1;\n            while (set.has(y)) {\n                y++;\n            }\n            max = Math.max(max, y - x);\n        }\n    }\n\n    return max;\n}\n\n// Test case\nconsole.log(longestConsecutive([100, 4, 200, 1, 3, 2]));",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 18,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Maximum Subarray"
            ]
        },
        "question": "function maximumSum(arr) {\n    if (arr.length === 1) return arr[0];\n\n    let max0 = arr[0];\n    let max1 = arr[0];\n    let res = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        max1 = Math.max(max1 + arr[i], max0);\n        max0 = Math.max(max0 + arr[i], arr[i]);\n        res = Math.max(res, max0, max1);\n    }\n\n    return res;\n}\n\n// Test case\nconsole.log(maximumSum([1, -2, 0, 3])); // Output: 4",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 28,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "Stack",
                "RPN",
                "Evaluation"
            ]
        },
        "question": "var evalRPN = function (tokens) {\n  const stack = [];\n\n  for (let index = 0; index < tokens.length; index++) {\n    const token = tokens[index];\n    if (!Number.isNaN(Number(token))) {\n      stack.push(token);\n    } else {\n      const a = Number(stack.pop());\n      const b = Number(stack.pop());\n      if (token === \"*\") {\n        stack.push(b * a);\n      } else if (token === \"/\") {\n        stack.push((b / a) >> 0);\n      } else if (token === \"+\") {\n        stack.push(b + a);\n      } else if (token === \"-\") {\n        stack.push(b - a);\n      }\n    }\n  }\n\n  return stack.pop();\n};\n\n// Test case\nconst tokens = [\"2\", \"1\", \"+\", \"3\", \"*\"];\nconsole.log(evalRPN(tokens));",
        "gt": "9",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 22,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "alphabet board",
                "pathfinding",
                "string manipulation"
            ]
        },
        "question": "class Solution:\n    def alphabetBoardPath(self, target: str) -> str:\n        board = []\n        for i in range(5):\n            for j in range(5):\n                board.append((i,j))\n        board.append((5,0))\n        last_x = last_y = 0\n        ans = ''\n        for c in target:\n            nxt_x, nxt_y = board[ord(c)-ord('a')]\n            up = max(0, last_x - nxt_x)\n            down = max(0, nxt_x - last_x)\n            left = max(0, last_y - nxt_y)\n            right = max(0, nxt_y - last_y)\n            ans += 'U'*up + 'L'*left + 'D'*down + 'R'*right + '!' \n            last_x, last_y = nxt_x, nxt_y\n        return ans\n\nsolution = Solution()\nprint(solution.alphabetBoardPath(\"leet\")) # DDR!UURRR!!DDD!\nprint(solution.alphabetBoardPath(\"code\")) # RR!DDRR!UUL!R!",
        "gt": "DDR!UURRR!!DDD!\nRR!DDRR!UUL!R!",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 35,
            "repo": "LeetCode",
            "difficulty": 2,
            "keywords": [
                "Stack",
                "RPN",
                "Evaluation"
            ]
        },
        "question": "#include <iostream>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nclass Solution {\npublic:\n  int evalRPN(vector<string>& tokens) {\n    stack<int> s;\n    for (string t : tokens) {\n      if (isdigit(t.back())) s.push(stoi(t));\n      else {\n        int n = s.top();\n        s.pop();\n        switch(t[0]) {\n          case '+': s.top() += n; break;\n          case '-': s.top() -= n; break;\n          case '*': s.top() *= n; break;\n          case '/': s.top() /= n; break;\n        }\n      }\n    }\n    return s.top();\n  }\n};\n\n// Test case\nint main() {\n    Solution sol;\n    vector<string> tokens = {\"2\", \"1\", \"+\", \"3\", \"*\"};\n    cout << sol.evalRPN(tokens);\n    return 0;\n}",
        "gt": "9",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 35,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Binary Search",
                "Greedy",
                "Shipping"
            ]
        },
        "question": "var shipWithinDays = function (weights, D) {\n  let high = weights.reduce((acc, cur) => acc + cur);\n  let low = 0;\n\n  while (low < high) {\n    let mid = Math.floor((high + low) / 2);\n    if (canShip(mid)) {\n      high = mid;\n    } else {\n      low = mid + 1;\n    }\n  }\n\n  return low;\n\n  function canShip(opacity) {\n    let remain = opacity;\n    let count = 1;\n    for (let weight of weights) {\n      if (weight > opacity) {\n        return false;\n      }\n      remain -= weight;\n      if (remain < 0) {\n        count++;\n        remain = opacity - weight;\n      }\n      if (count > D) {\n        return false;\n      }\n    }\n    return count <= D;\n  }\n};\nconsole.log(shipWithinDays([1,2,3,4,5,6,7,8,9,10], 5));",
        "gt": "15",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 27,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Two Sum",
                "Hash Map",
                "Array"
            ]
        },
        "question": "#include <iostream>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& A, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < A.size(); ++i) {\n            int t = target - A[i];\n            if (m.count(t)) return { m[t], i };\n            m[A[i]] = i;\n        }\n        return {};\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> nums = {2, 7, 11, 15};\n    int target = 9;\n    vector<int> result = solution.twoSum(nums, target);\n    cout << result[0] << \" \" << result[1];\n    return 0;\n}",
        "gt": "0 1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 26,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Stock Trading",
                "Profit Calculation",
                "Array Iteration"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int res = 0;\n        for(int i=1;i<prices.size();i++)\n        {\n            if(prices[i] > prices[i-1])\n            {\n                res += prices[i] - prices[i-1];\n            }\n        }\n        return res;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> prices = {7, 1, 5, 3, 6, 4};\n    cout << solution.maxProfit(prices);\n    return 0;\n}",
        "gt": "7",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 56,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "BFS",
                "Graph",
                "Shortest Path"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <queue>\n#include <unordered_set>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minJumps(vector<int>& arr) {\n        int n = arr.size();\n        if (n == 1) return 0;\n\n        unordered_map<int, vector<int>> graph;\n        for (int i = 0; i < n; ++i) {\n            graph[arr[i]].push_back(i);\n        }\n\n        unordered_set<int> visited;\n        visited.insert(0);\n        queue<pair<int, int>> q;\n        q.push({0, 0});\n\n        while (!q.empty()) {\n            auto [node, steps] = q.front();\n            q.pop();\n\n            if (node == n - 1) {\n                return steps;\n            }\n\n            vector<int> neighbors = graph[arr[node]];\n            neighbors.push_back(node - 1);\n            neighbors.push_back(node + 1);\n\n            for (auto neighbor : neighbors) {\n                if (neighbor >= 0 && neighbor < n && visited.find(neighbor) == visited.end()) {\n                    visited.insert(neighbor);\n                    q.push({neighbor, steps + 1});\n                }\n            }\n\n            graph[arr[node]].clear();\n        }\n\n        return -1;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> arr = {100,-23,-23,404,100,23,23,23,3,404};\n    cout << solution.minJumps(arr);\n    return 0;\n}",
        "gt": "3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 32,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Linked List",
                "Binary Search Tree",
                "Divide and Conquer"
            ]
        },
        "question": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef sortedListToBST(head):\n    if not head:\n        return None\n    return run(head, None)\n\ndef run(head, tail):\n    if head == tail:\n        return None\n    slow, fast = head, head\n    while fast != tail and fast.next != tail:\n        fast = fast.next.next\n        slow = slow.next\n    root = TreeNode(slow.val)\n    root.left = run(head, slow)\n    root.right = run(slow.next, tail)\n    return root\n\n# Test case\nhead = ListNode(-10, ListNode(-3, ListNode(0, ListNode(5, ListNode(9)))))\nresult = sortedListToBST(head)\nprint('[0,-3,9,-10,None,5]')",
        "gt": "[0,-3,9,-10,None,5]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 25,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Palindrome",
                "String",
                "Subsequence"
            ]
        },
        "question": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int removePalindromeSub(string s) {\n        if (s.empty()) {\n            return 0;\n        }\n        string rev_s = s;\n        reverse(rev_s.begin(), rev_s.end());\n        return s == rev_s ? 1 : 2;\n    }\n};\n\nint main() {\n    Solution solution;\n    cout << solution.removePalindromeSub(\"ababa\") << endl; // Output: 1\n    cout << solution.removePalindromeSub(\"abb\") << endl;   // Output: 2\n    cout << solution.removePalindromeSub(\"baabb\") << endl; // Output: 2\n    cout << solution.removePalindromeSub(\"\") << endl;      // Output: 0\n    return 0;\n}",
        "gt": "1\n2\n2\n0",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 38,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Binary Tree",
                "Recursion",
                "Path Sum"
            ]
        },
        "question": "#include <iostream>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left, *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\nprivate:\n    int ans = INT_MIN;\n    int postOrder(TreeNode *root) {\n        if (!root) return 0;\n        int L = max(0, postOrder(root->left)), R = max(0, postOrder(root->right));\n        ans = max(ans, L + R + root->val);\n        return root->val + max(L, R);\n    }\npublic:\n    int maxPathSum(TreeNode* root) {\n        postOrder(root);\n        return ans;\n    }\n};\n\nint main() {\n    TreeNode* root = new TreeNode(-10);\n    root->left = new TreeNode(9);\n    root->right = new TreeNode(20);\n    root->right->left = new TreeNode(15);\n    root->right->right = new TreeNode(7);\n\n    Solution solution;\n    cout << solution.maxPathSum(root);\n    return 0;\n}",
        "gt": "42",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 26,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Permutation",
                "Array Manipulation",
                "Optimization"
            ]
        },
        "question": "from typing import List\n\nclass Solution:\n    def prevPermOpt1(self, arr: List[int]) -> List[int]:\n        l = -1\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i-1] > arr[i]:\n                l = i - 1\n                break\n        if l == -1: return arr\n\n        r = -1\n        for i in range(len(arr)-1, l, -1):\n            if arr[i] < arr[l] and arr[i] != arr[i-1]:\n                r = i\n                break\n        if r == -1:\n            return arr\n\n        arr[l], arr[r] = arr[r], arr[l]\n        return arr\n\nsolution = Solution()\nprint(solution.prevPermOpt1([3,2,1])) # [3,1,2]\nprint(solution.prevPermOpt1([1,1,5])) # [1,1,5]\nprint(solution.prevPermOpt1([1,9,4,6,7])) # [1,7,4,6,9]",
        "gt": "[3, 1, 2]\n[1, 1, 5]\n[1, 7, 4, 6, 9]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 45,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Binary Tree",
                "BFS",
                "Depth"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (root == nullptr) return 0;\n        vector<TreeNode*> q;\n        q.push_back(root);\n        int depth = 0;\n\n        while (!q.empty()) {\n            depth++;\n            int sz = q.size();\n            for (int i = 0; i < sz; ++i) {\n                TreeNode* t = q.front();\n                q.erase(q.begin());\n                if (t->left != nullptr) q.push_back(t->left);\n                if (t->right != nullptr) q.push_back(t->right);\n            }\n        }\n        return depth;\n    }\n};\n\n// Test case\nint main() {\n    TreeNode* root = new TreeNode(3);\n    root->left = new TreeNode(9);\n    root->right = new TreeNode(20);\n    root->right->left = new TreeNode(15);\n    root->right->right = new TreeNode(7);\n\n    Solution solution;\n    cout << solution.maxDepth(root);\n    return 0;\n}",
        "gt": "3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 39,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Sliding Window",
                "Deque",
                "Subarray"
            ]
        },
        "question": "class Solution {\n    longestSubarray(nums, limit) {\n        const maxDeque = [];\n        const minDeque = [];\n        let left = 0;\n        let result = 0;\n\n        for (let right = 0; right < nums.length; right++) {\n            while (maxDeque.length && nums[right] > maxDeque[maxDeque.length - 1]) {\n                maxDeque.pop();\n            }\n            maxDeque.push(nums[right]);\n\n            while (minDeque.length && nums[right] < minDeque[minDeque.length - 1]) {\n                minDeque.pop();\n            }\n            minDeque.push(nums[right]);\n\n            while (maxDeque[0] - minDeque[0] > limit) {\n                if (nums[left] === maxDeque[0]) {\n                    maxDeque.shift();\n                }\n                if (nums[left] === minDeque[0]) {\n                    minDeque.shift();\n                }\n                left++;\n            }\n\n            result = Math.max(result, right - left + 1);\n        }\n\n        return result;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.longestSubarray([8,2,4,7], 4)); // Output: 2\nconsole.log(solution.longestSubarray([10,1,2,4,7,2], 5)); // Output: 4\nconsole.log(solution.longestSubarray([4,2,2,2,4,4,2,2], 0)); // Output: 3",
        "gt": "2\n4\n3",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 18,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Partitioning",
                "Optimization"
            ]
        },
        "question": "class Solution {\n    maxSumAfterPartitioning(arr, k) {\n        const n = arr.length;\n        const dp = new Array(n + 1).fill(0);\n\n        for (let i = 1; i <= n; i++) {\n            let maxEle = 0;\n            for (let j = i; j < Math.min(n + 1, i + k); j++) {\n                maxEle = Math.max(maxEle, arr[j - 1]);\n                dp[j] = Math.max(dp[j], (j - i + 1) * maxEle + dp[i - 1]);\n            }\n        }\n        return Math.max(...dp);\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.maxSumAfterPartitioning([1,15,7,9,2,5,10], 3));",
        "gt": "84",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 29,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Partitioning",
                "Optimization"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxSumAfterPartitioning(vector<int>& arr, int k) {\n        int n = arr.size();\n        vector<int> dp(n + 1, 0);\n\n        for (int i = 1; i <= n; ++i) {\n            int maxEle = 0;\n            for (int j = i; j < min(n + 1, i + k); ++j) {\n                maxEle = max(maxEle, arr[j - 1]);\n                dp[j] = max(dp[j], (j - i + 1) * maxEle + dp[i - 1]);\n            }\n        }\n        return *max_element(dp.begin(), dp.end());\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> arr = {1, 15, 7, 9, 2, 5, 10};\n    int k = 3;\n    cout << solution.maxSumAfterPartitioning(arr, k);\n    return 0;\n}",
        "gt": "84",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 60,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Tree",
                "BFS",
                "Zigzag Traversal"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\npublic:\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {\n        auto ret = vector<vector<int>>();\n        if (root == nullptr) return ret;\n        auto queue = vector<const TreeNode*>{root};\n        auto isOdd = true;\n        while (!queue.empty()) {\n            auto sz = queue.size();\n            auto level = vector<int>();\n            for (auto i = 0; i < sz; ++i) {\n                auto n = queue.front();\n                queue.erase(queue.begin());\n                if (isOdd) level.push_back(n->val);\n                else level.insert(level.begin(), n->val);\n                if (n->left != nullptr) queue.push_back(n->left);\n                if (n->right != nullptr) queue.push_back(n->right);\n            }\n            isOdd = !isOdd;\n            ret.push_back(level);\n        }\n        return ret;\n    }\n};\n\nint main() {\n    TreeNode* root = new TreeNode(3);\n    root->left = new TreeNode(9);\n    root->right = new TreeNode(20);\n    root->right->left = new TreeNode(15);\n    root->right->right = new TreeNode(7);\n\n    Solution solution;\n    vector<vector<int>> result = solution.zigzagLevelOrder(root);\n\n    cout << \"[\";\n    for (size_t i = 0; i < result.size(); ++i) {\n        cout << \"[\";\n        for (size_t j = 0; j < result[i].size(); ++j) {\n            cout << result[i][j];\n            if (j != result[i].size() - 1) cout << \",\";\n        }\n        cout << \"]\";\n        if (i != result.size() - 1) cout << \",\";\n    }\n    cout << \"]\";\n\n    return 0;\n}",
        "gt": "[[3],[20,9],[15,7]]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 39,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Linked List",
                "Cycle Detection",
                "Two Pointers"
            ]
        },
        "question": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\ndef detectCycle(head):\n    if not head or not head.next:\n        return None\n\n    fast = head\n    slow = head\n\n    while True:\n        if not fast or not fast.next:\n            return None\n        fast = fast.next.next\n        slow = slow.next\n        if fast == slow:\n            break\n\n    fast = head\n\n    while fast != slow:\n        fast = fast.next\n        slow = slow.next\n\n    return fast\n\n# Test case\nnode1 = ListNode(3)\nnode2 = ListNode(2)\nnode3 = ListNode(0)\nnode4 = ListNode(-4)\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node2  # Creates a cycle\n\nprint('true' if detectCycle(node1) == node2 else 'false')",
        "gt": "true",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 40,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Palindrome Partitioning"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <string>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minCut(string s) {\n        int n = s.size();\n        vector<vector<bool>> palindromePairs(n, vector<bool>(n, true));\n\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i + 1; j < n; ++j) {\n                palindromePairs[i][j] = (s[i] == s[j]) && palindromePairs[i + 1][j - 1];\n            }\n        }\n\n        vector<int> dp(n, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (palindromePairs[0][j]) {\n                    dp[j] = 0;\n                } else if (palindromePairs[i + 1][j]) {\n                    dp[j] = min(dp[j], dp[i] + 1);\n                }\n            }\n        }\n\n        return dp[n - 1];\n    }\n};\n\nint main() {\n    Solution solution;\n    cout << solution.minCut(\"aab\") << endl;\n    return 0;\n}",
        "gt": "1",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 17,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Sliding Window",
                "Array Manipulation",
                "Max Consecutive Ones"
            ]
        },
        "question": "from typing import List\n\nclass Solution:\n    def longestOnes(self, A: List[int], K: int) -> int:\n        i = 0\n        for j in range(len(A)):\n            K -= 1 - A[j]\n            if K < 0:\n                K += 1 - A[i]\n                i += 1\n        return len(A) - i\n\n# Test case\nA = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0]\nK = 2\nsolution = Solution()\nprint(solution.longestOnes(A, K))",
        "gt": "6",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 28,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Search Tree",
                "Recursion",
                "Divide and Conquer"
            ]
        },
        "question": "class TreeNode { constructor(val, left = null, right = null) { this.val = val; this.left = left; this.right = right; } }\nfunction sortedArrayToBST(nums) {\n  if (nums.length === 0) return null;\n  const mid = nums.length >> 1;\n  const root = new TreeNode(nums[mid]);\n\n  root.left = sortedArrayToBST(nums.slice(0, mid));\n  root.right = sortedArrayToBST(nums.slice(mid + 1));\n  return root;\n}\n\n// Test case\nconst result = sortedArrayToBST([-10, -3, 0, 5, 9]);\nfunction serializeTree(root) {\n  const result = [];\n  function dfs(node) {\n    if (!node) {\n      result.push('null');\n      return;\n    }\n    result.push(node.val);\n    dfs(node.left);\n    dfs(node.right);\n  }\n  dfs(root);\n  return result.join(',');\n}\nconsole.log(serializeTree(result));",
        "gt": "0,-3,-10,null,null,null,9,5,null,null,null",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 41,
            "repo": "LeetCode",
            "difficulty": 4,
            "keywords": [
                "Three Sum",
                "Sorting",
                "Two Pointers"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& A) {\n        sort(begin(A), end(A));\n        vector<vector<int>> ans;\n        int N = A.size();\n        for (int i = 0; i < N - 2; ++i) {\n            if (i && A[i] == A[i - 1]) continue;\n            int L = i + 1, R = N - 1;\n            while (L < R) {\n                int sum = A[i] + A[L] + A[R];\n                if (sum == 0) ans.push_back({ A[i], A[L], A[R] });\n                if (sum >= 0) {\n                    --R;\n                    while (L < R && A[R] == A[R + 1]) --R;\n                }\n                if (sum <= 0) {\n                    ++L;\n                    while (L < R && A[L] == A[L - 1]) ++L;\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> nums = {-1, 0, 1, 2, -1, -4};\n    vector<vector<int>> result = solution.threeSum(nums);\n    for (const auto &triplet : result) {\n        cout << \"[\" << triplet[0] << \", \" << triplet[1] << \", \" << triplet[2] << \"]\\n\";\n    }\n    return 0;\n}",
        "gt": "[-1, -1, 2]\n[-1, 0, 1]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 31,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Maximum Subarray"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maximumSum(vector<int>& arr) {\n        if (arr.size() == 1) return arr[0];\n\n        int max0 = arr[0];\n        int max1 = arr[0];\n        int res = arr[0];\n\n        for (int i = 1; i < arr.size(); i++) {\n            max1 = max(max1 + arr[i], max0);\n            max0 = max(max0 + arr[i], arr[i]);\n            res = max({res, max0, max1});\n        }\n\n        return res;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<int> arr = {1, -2, 0, 3};\n    cout << solution.maximumSum(arr); // Output: 4\n    return 0;\n}",
        "gt": "4",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 45,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Dynamic Programming",
                "Backtracking",
                "Memoization"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nclass Solution {\n    int maxLen = 0;\n    unordered_set<string> ws;\n    vector<int> m;\n    vector<string> ans;\n\n    bool dfs(string &s, int i, string tmp) {\n        if (i == s.size()) {\n            ans.push_back(tmp);\n            return true;\n        }\n        if (m[i] == 0) return m[i];\n        m[i] = 0;\n        for (int j = min((int)s.size(), i + maxLen); j > i; --j) {\n            auto sub = s.substr(i, j - i);\n            if (ws.count(sub) && dfs(s, j, tmp.size() ? tmp + \" \" + sub : sub)) m[i] = 1;\n        }\n        return m[i];\n    }\n\npublic:\n    vector<string> wordBreak(string s, vector<string>& dict) {\n        ws = {dict.begin(), dict.end()};\n        for (auto &w : dict) maxLen = max(maxLen, (int)w.size());\n        m.assign(s.size(), -1);\n        dfs(s, 0, \"\");\n        return ans;\n    }\n};\n\n// Test case\nint main() {\n    Solution solution;\n    vector<string> wordDict = {\"cat\", \"cats\", \"and\", \"sand\", \"dog\"};\n    vector<string> result = solution.wordBreak(\"catsanddog\", wordDict);\n    for (const string& s : result) {\n        cout << s << endl;\n    }\n    return 0;\n}",
        "gt": "cats and dog\ncat sand dog",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 15,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Stock Trading",
                "Profit Calculation",
                "Array Iteration"
            ]
        },
        "question": "var maxProfit = function (prices) {\n  let profit = 0;\n\n  for (let i = 1; i < prices.length; i++) {\n    if (prices[i] > prices[i - 1]) {\n      profit = profit + prices[i] - prices[i - 1];\n    }\n  }\n\n  return profit;\n};\n\n// Test case\nconst prices = [7, 1, 5, 3, 6, 4];\nconsole.log(maxProfit(prices));",
        "gt": "7",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 22,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "bit manipulation",
                "substring",
                "vowels"
            ]
        },
        "question": "class Solution {\n    findTheLongestSubstring(s) {\n        const mapper = { \"a\": 1, \"e\": 2, \"i\": 4, \"o\": 8, \"u\": 16 };\n        const seen = { 0: -1 };\n        let res = 0, cur = 0;\n\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] in mapper) {\n                cur ^= mapper[s[i]];\n            }\n            if (cur in seen) {\n                res = Math.max(res, i - seen[cur]);\n            } else {\n                seen[cur] = i;\n            }\n        }\n        return res;\n    }\n}\n\nconst solution = new Solution();\nconsole.log(solution.findTheLongestSubstring(\"eleetminicoworoep\"));",
        "gt": "13",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "CPP",
            "lines": 55,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Linked List",
                "Stack",
                "Next Greater Element"
            ]
        },
        "question": "#include <iostream>\n#include <vector>\n#include <stack>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x = 0, ListNode *nextNode = nullptr) : val(x), next(nextNode) {}\n};\n\nclass Solution {\npublic:\n    vector<int> nextLargerNodes(ListNode* head) {\n        vector<int> res;\n        stack<pair<int, int>> st; // {index, value}\n\n        ListNode* current = head;\n        int index = 0;\n\n        while (current) {\n            while (!st.empty() && current->val > st.top().second) {\n                res[st.top().first] = current->val;\n                st.pop();\n            }\n            st.push({index, current->val});\n            res.push_back(0);\n            current = current->next;\n            index++;\n        }\n\n        return res;\n    }\n};\n\n// Test case\nListNode* createLinkedList(const vector<int>& arr) {\n    ListNode dummy(0);\n    ListNode* current = &dummy;\n    for (int num : arr) {\n        current->next = new ListNode(num);\n        current = current->next;\n    }\n    return dummy.next;\n}\n\nint main() {\n    Solution solution;\n    ListNode* head = createLinkedList({2, 1, 5});\n    vector<int> result = solution.nextLargerNodes(head);\n    for (int val : result) {\n        cout << val << \" \";\n    }\n    return 0;\n}",
        "gt": "5 5 0",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 11,
            "repo": "LeetCode",
            "difficulty": 1,
            "keywords": [
                "Palindrome",
                "String",
                "Subsequence"
            ]
        },
        "question": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        return 1 if s == s[::-1] else 2\n\nsolution = Solution()\nprint(solution.removePalindromeSub(\"ababa\")) # Output: 1\nprint(solution.removePalindromeSub(\"abb\"))   # Output: 2\nprint(solution.removePalindromeSub(\"baabb\")) # Output: 2\nprint(solution.removePalindromeSub(\"\"))      # Output: 0",
        "gt": "1\n2\n2\n0",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 46,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Binary Tree",
                "BFS",
                "Zigzag Traversal"
            ]
        },
        "question": "class TreeNode {\n  constructor(val, left = null, right = null) {\n    this.val = val;\n    this.left = left;\n    this.right = right;\n  }\n}\n\nfunction zigzagLevelOrder(root) {\n  if (!root) return [];\n  const items = [];\n  let isOdd = true;\n  let levelNodes = [];\n\n  const queue = [root, null];\n\n  while (queue.length > 0) {\n    const t = queue.shift();\n\n    if (t) {\n      levelNodes.push(t.val);\n      if (t.left) {\n        queue.push(t.left);\n      }\n      if (t.right) {\n        queue.push(t.right);\n      }\n    } else {\n      if (!isOdd) {\n        levelNodes = levelNodes.reverse();\n      }\n      items.push(levelNodes);\n      levelNodes = [];\n      isOdd = !isOdd;\n      if (queue.length > 0) {\n        queue.push(null);\n      }\n    }\n  }\n\n  return items;\n}\n\n// Test case\nconst root = new TreeNode(3, new TreeNode(9), new TreeNode(20, new TreeNode(15), new TreeNode(7)));\nconsole.log(JSON.stringify(zigzagLevelOrder(root)));",
        "gt": "[[3],[20,9],[15,7]]",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 17,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "bit manipulation",
                "substring",
                "vowels"
            ]
        },
        "question": "class Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        mapper = {\"a\": 1, \"e\": 2, \"i\": 4, \"o\": 8, \"u\": 16}\n        seen = {0: -1}\n        res = cur = 0\n\n        for i in range(len(s)):\n            if s[i] in mapper:\n                cur ^= mapper.get(s[i])\n            if cur in seen:\n                res = max(res, i - seen.get(cur))\n            else:\n                seen[cur] = i\n        return res\n\nsolution = Solution()\nprint(solution.findTheLongestSubstring(\"eleetminicoworoep\"))",
        "gt": "13",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "JavaScript",
            "lines": 16,
            "repo": "LeetCode",
            "difficulty": 3,
            "keywords": [
                "Sliding Window",
                "Array Manipulation",
                "Max Consecutive Ones"
            ]
        },
        "question": "function longestOnes(A, K) {\n    let i = 0;\n    for (let j = 0; j < A.length; j++) {\n        K -= 1 - A[j];\n        if (K < 0) {\n            K += 1 - A[i];\n            i++;\n        }\n    }\n    return A.length - i;\n}\n\n// Test case\nconst A = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0];\nconst K = 2;\nconsole.log(longestOnes(A, K));",
        "gt": "6",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    },
    {
        "custom_categoey": 1,
        "custom_features": {
            "language": "Python",
            "lines": 20,
            "repo": "LeetCode",
            "difficulty": 5,
            "keywords": [
                "Backtracking",
                "Word Score",
                "Letter Frequency"
            ]
        },
        "question": "from collections import Counter\nclass Solution:\n    def maxScoreWords(self, words, letters, score):\n        self.ans = 0\n        words_score = [sum(score[ord(c)-ord('a')] for c in word) for word in words]\n        words_counter = [Counter(word) for word in words]\n\n        def backtrack(start, cur, counter):\n            if start > len(words):\n                return\n            self.ans = max(self.ans, cur)\n            for j, w_counter in enumerate(words_counter[start:], start):\n                if all(n <= counter.get(c,0) for c,n in w_counter.items()):\n                    backtrack(j+1, cur+words_score[j], counter-w_counter)\n\n        backtrack(0, 0, Counter(letters))\n        return self.ans\n\nsolution = Solution()\nprint(solution.maxScoreWords([\"dog\",\"cat\",\"dad\",\"good\"], [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]))",
        "gt": "23",
        "sys_0shot": "\nGiven the following code, what is the execution result?\nYour answer should be in the following format:\nOutput:\n<execution result>\n",
        "sys_3shot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\nFollowing are 3 examples: \nExample 1:\nInput:\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution solution;\n    vector<int> nums = {2,3,-2,4};\n    cout << solution.maxProduct(nums);\n    return 0;\n}\nOutput:\n6\n\nExample 2:\nInput:\nclass Solution:\n    def maxProduct(self, nums):\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(n):\n            temp = a\n            a = max(a * nums[i], b * nums[i], nums[i])\n            b = min(temp * nums[i], b * nums[i], nums[i])\n            ans = max(ans, a)\n        return ans\n\nsolution = Solution()\nprint(solution.maxProduct([2,3,-2,4]))\nOutput:\n6\n\nExample 3:\nInput:\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i]));\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i]));\n    res = Math.max(res, max);\n  }\n  return res;\n};\nconsole.log(maxProduct([2,3,-2,4]));\nOutput:\n6\n",
        "sys_cot": "\nGiven the following code, what is the execution result?\nYou should think step by step.  Your answer should be in the following format:\nThought: <your thought>\nOutput:\n<execution result>\n"
    }
]